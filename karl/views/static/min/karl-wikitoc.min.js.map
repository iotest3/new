{"version":3,"sources":["slick.grid.js","jquery.event.drag-2.0.js","jquery.event.drop-2.0.min.js","slick.core.js","slick.groupitemmetadataprovider.js","slick.dataview.js","karl.wikitoc.js"],"names":[],"mappings":"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","file":"karl-wikitoc.min.js","sourcesContent":["/**\n * @license\n * (c) 2009-2010 Michael Leibman\n * michael{dot}leibman{at}gmail{dot}com\n * http://github.com/mleibman/slickgrid\n * Distributed under MIT license.\n * All rights reserved.\n *\n * SlickGrid v2.0 alpha\n *\n * NOTES:\n *     Cell/row DOM manipulations are done directly bypassing jQuery's DOM manipulation methods.\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\n *     and do proper cleanup.\n\n * 2011 ree@greenfinity.hu:\n * fixed an IE issue (hopefully).\n\n- IE7, IE8\n- visit a grid with more than 1500 items \n- scroll down, move the scrollbar up and down frantically without releasing, then release, the error is always reproducable if you move wild enough.\nYou have to move faster then IE is able to catch up with displaying, IE, you scroll in white content.\n\nslick.grid.js line 1367: Invalid Pointer\n\nfor (i = 0, l = x.childNodes.length; i < l; i++) {\n    rowsCache[rows[i]] = parentNode.appendChild(x.firstChild);\n}\n\ni=36, l=43. This means that x had 46 child nodes, now we are processing the #36, \nbut yet at this time x.firstChild = null, somehow x lost more children then how\n much we actually removed from it.\n\nMy first feeling is that this is a bug in slickgrid (or actually IE?).\nThis part of code is unchanged in the current trunk of slickgrid.\n\n\nThe following fixes it but I am not sure why the whole issue happens. \nIf we loose no rows then maybe this is just the correct fix.\n\n\nvar i=0;\nwhile (x.firstChild) {\n    rowsCache[rows[i]] = parentNode.appendChild(x.firstChild);\n    i += 1;\n}\n\n\n*/\n\n// make sure required JavaScript modules are loaded\nif (typeof jQuery === \"undefined\") {\n    throw \"SlickGrid requires jquery module to be loaded\";\n}\nif (!jQuery.fn.drag) {\n    throw \"SlickGrid requires jquery.event.drag module to be loaded\";\n}\nif (typeof Slick === \"undefined\") {\n    throw \"slick.core.js not loaded\";\n}\n\n\n(function($) {\n    // Slick.Grid\n    $.extend(true, window, {\n        Slick: {\n            Grid: SlickGrid\n        }\n    });\n\n    var scrollbarDimensions; // shared across all grids on this page\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // SlickGrid class implementation (available as Slick.Grid)\n\n    /**\n     * @param {Node}              container   Container node to create the grid in.\n     * @param {Array,Object}      data        An array of objects for databinding.\n     * @param {Array}             columns     An array of column definitions.\n     * @param {Object}            options     Grid options.\n     **/\n    function SlickGrid(container,data,columns,options) {\n        /// <summary>\n        /// Create and manage virtual grid in the specified $container,\n        /// connecting it to the specified data source. Data is presented\n        /// as a grid with the specified columns and data.length rows.\n        /// Options alter behaviour of the grid.\n        /// </summary>\n\n        // settings\n        var defaults = {\n            headerHeight: 25,\n            rowHeight: 25,\n            defaultColumnWidth: 80,\n            enableAddRow: false,\n            leaveSpaceForNewRows: false,\n            editable: false,\n            autoEdit: true,\n            enableCellNavigation: true,\n            enableCellRangeSelection: false,\n            enableColumnReorder: true,\n            asyncEditorLoading: false,\n            asyncEditorLoadDelay: 100,\n            forceFitColumns: false,\n            enableAsyncPostRender: false,\n            asyncPostRenderDelay: 60,\n            autoHeight: false,\n            editorLock: Slick.GlobalEditorLock,\n            showHeaderRow: false,\n            headerRowHeight: 25,\n            showTopPanel: false,\n            topPanelHeight: 25,\n            formatterFactory: null,\n            editorFactory: null,\n            cellFlashingCssClass: \"flashing\",\n            selectedCellCssClass: \"selected\",\n            multiSelect: true,\n            enableTextSelectionOnCells: false\n        };\n\n        var columnDefaults = {\n            name: \"\",\n            resizable: true,\n            sortable: false,\n            minWidth: 30,\n            rerenderOnResize: false,\n            headerCssClass: null\n        };\n\n        // scroller\n        var maxSupportedCssHeight;      // browser's breaking point\n        var th;                         // virtual height\n        var h;                          // real scrollable height\n        var ph;                         // page height\n        var n;                          // number of pages\n        var cj;                         // \"jumpiness\" coefficient\n\n        var page = 0;                   // current page\n        var offset = 0;                 // current page offset\n        var scrollDir = 1;\n\n        // private\n        var $container;\n        var uid = \"slickgrid_\" + Math.round(1000000 * Math.random());\n        var self = this;\n        var $headerScroller;\n        var $headers;\n        var $headerRow, $headerRowScroller;\n        var $topPanelScroller;\n        var $topPanel;\n        var $viewport;\n        var $canvas;\n        var $style;\n        var stylesheet;\n        var viewportH, viewportW;\n        var viewportHasHScroll;\n        var headerColumnWidthDiff, headerColumnHeightDiff, cellWidthDiff, cellHeightDiff;  // padding+border\n        var absoluteColumnMinWidth;\n\n        var activePosX;\n        var activeRow, activeCell;\n        var activeCellNode = null;\n        var currentEditor = null;\n        var serializedEditorValue;\n        var editController;\n\n        var rowsCache = {};\n        var renderedRows = 0;\n        var numVisibleRows;\n        var prevScrollTop = 0;\n        var scrollTop = 0;\n        var lastRenderedScrollTop = 0;\n        var prevScrollLeft = 0;\n        var avgRowRenderTime = 10;\n\n        var selectionModel;\n        var selectedRows = [];\n\n        var plugins = [];\n        var cellCssClasses = {};\n\n        var columnsById = {};\n        var sortColumnId;\n        var sortAsc = true;\n\n        // async call handles\n        var h_editorLoader = null;\n        var h_render = null;\n        var h_postrender = null;\n        var postProcessedRows = {};\n        var postProcessToRow = null;\n        var postProcessFromRow = null;\n\n        // perf counters\n        var counter_rows_rendered = 0;\n        var counter_rows_removed = 0;\n\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Initialization\n\n        function init() {\n            /// <summary>\n            /// Initialize 'this' (self) instance of a SlickGrid.\n            /// This function is called by the constructor.\n            /// </summary>\n\n            $container = $(container);\n            if($container.length < 1) {\n              throw new Error(\"SlickGrid requires a valid container, \"+container+\" does not exist in the DOM.\");\n            }\n\n            maxSupportedCssHeight = getMaxSupportedCssHeight();\n\n            scrollbarDimensions = scrollbarDimensions || measureScrollbar(); // skip measurement if already have dimensions\n            options = $.extend({},defaults,options);\n            columnDefaults.width = options.defaultColumnWidth;\n\n            // validate loaded JavaScript modules against requested options\n            if (options.enableColumnReorder && !$.fn.sortable) {\n                throw new Error(\"SlickGrid's \\\"enableColumnReorder = true\\\" option requires jquery-ui.sortable module to be loaded\");\n            }\n\n            editController = {\n                \"commitCurrentEdit\": commitCurrentEdit,\n                \"cancelCurrentEdit\": cancelCurrentEdit\n            };\n\n            $container\n                .empty()\n                .attr(\"tabIndex\",0)\n                .attr(\"hideFocus\",true)\n                .css(\"overflow\",\"hidden\")\n                .css(\"outline\",0)\n                .addClass(uid)\n                .addClass(\"ui-widget\");\n\n            // set up a positioning container if needed\n            if (!/relative|absolute|fixed/.test($container.css(\"position\")))\n                $container.css(\"position\",\"relative\");\n\n            $headerScroller = $(\"<div class='slick-header ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\n            $headers = $(\"<div class='slick-header-columns' style='width:10000px; left:-1000px' />\").appendTo($headerScroller);\n\n            $headerRowScroller = $(\"<div class='slick-headerrow ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\n            $headerRow = $(\"<div class='slick-headerrow-columns' style='width:10000px;' />\").appendTo($headerRowScroller);\n\n            $topPanelScroller = $(\"<div class='slick-top-panel-scroller ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\n            $topPanel = $(\"<div class='slick-top-panel' style='width:10000px' />\").appendTo($topPanelScroller);\n\n            if (!options.showTopPanel) {\n                $topPanelScroller.hide();\n            }\n\n            if (!options.showHeaderRow) {\n                $headerRowScroller.hide();\n            }\n\n            $viewport = $(\"<div class='slick-viewport' tabIndex='0' hideFocus style='width:100%;overflow-x:auto;outline:0;position:relative;overflow-y:auto;'>\").appendTo($container);\n            $canvas = $(\"<div class='grid-canvas' tabIndex='0' hideFocus />\").appendTo($viewport);\n\n            // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n            // calculate the diff so we can set consistent sizes\n            measureCellPaddingAndBorder();\n\n            // for usability reasons, all text selection in SlickGrid is disabled\n            // with the exception of input and textarea elements (selection must\n            // be enabled there so that editors work as expected); note that\n            // selection in grid cells (grid body) is already unavailable in\n            // all browsers except IE\n            disableSelection($headers); // disable all text selection in header (including input and textarea)\n\n            if (!options.enableTextSelectionOnCells) {\n                // disable text selection in grid cells except in input and textarea elements\n                // (this is IE-specific, because selectstart event will only fire in IE)\n                $viewport.bind(\"selectstart.ui\", function (event) {\n                    return $(event.target).is(\"input,textarea\");\n                });\n            }\n\n            viewportW = parseFloat($.css($container[0], \"width\", true));\n\n            createColumnHeaders();\n            setupColumnSort();\n            createCssRules();\n            resizeAndRender();\n\n            bindAncestorScrollEvents();\n            $viewport.bind(\"scroll.slickgrid\", handleScroll);\n            $container.bind(\"resize.slickgrid\", resizeAndRender);\n            $headerScroller\n                .bind(\"contextmenu.slickgrid\", handleHeaderContextMenu)\n                .bind(\"click.slickgrid\", handleHeaderClick);\n\n            $canvas\n                .bind(\"keydown.slickgrid\", handleKeyDown)\n                .bind(\"click.slickgrid\", handleClick)\n                .bind(\"dblclick.slickgrid\", handleDblClick)\n                .bind(\"contextmenu.slickgrid\", handleContextMenu)\n                .bind(\"draginit\", handleDragInit)\n                .bind(\"dragstart\", handleDragStart)\n                .bind(\"drag\", handleDrag)\n                .bind(\"dragend\", handleDragEnd);\n\n            $canvas.delegate(\".slick-cell\", \"mouseenter\", handleMouseEnter);\n            $canvas.delegate(\".slick-cell\", \"mouseleave\", handleMouseLeave);\n        }\n\n        function registerPlugin(plugin) {\n            plugins.unshift(plugin);\n            plugin.init(self);\n        }\n\n        function unregisterPlugin(plugin) {\n            for (var i = plugins.length; i >= 0; i--) {\n                if (plugins[i] === plugin) {\n                    if (plugins[i].destroy) {\n                        plugins[i].destroy();\n                    }\n                    plugins.splice(i, 1);\n                    break;\n                }\n            }\n        }\n\n        function setSelectionModel(model) {\n            if (selectionModel) {\n                selectionModel.onSelectedRangesChanged.unsubscribe(handleSelectedRangesChanged);\n                if (selectionModel.destroy) {\n                    selectionModel.destroy();\n                }\n            }\n\n            selectionModel = model;\n            selectionModel.init(self);\n\n            selectionModel.onSelectedRangesChanged.subscribe(handleSelectedRangesChanged);\n        }\n\n        function getSelectionModel() {\n            return selectionModel;\n        }\n\n        function getCanvasNode() {\n            return $canvas[0];\n        }\n\n        function measureScrollbar() {\n            /// <summary>\n            /// Measure width of a vertical scrollbar\n            /// and height of a horizontal scrollbar.\n            /// </summary\n            /// <returns>\n            /// { width: pixelWidth, height: pixelHeight }\n            /// </returns>\n            var $c = $(\"<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'></div>\").appendTo(\"body\");\n            var dim = { width: $c.width() - $c[0].clientWidth, height: $c.height() - $c[0].clientHeight };\n            $c.remove();\n            return dim;\n        }\n\n        function getRowWidth() {\n            var rowWidth = 0;\n            var i = columns.length;\n            while (i--) {\n                rowWidth += (columns[i].width || columnDefaults.width);\n            }\n            return rowWidth;\n        }\n\n        function setCanvasWidth(width) {\n            $canvas.width(width);\n            viewportHasHScroll = (width > viewportW - scrollbarDimensions.width);\n        }\n\n        function disableSelection($target) {\n            /// <summary>\n            /// Disable text selection (using mouse) in\n            /// the specified target.\n            /// </summary\n            if ($target && $target.jquery) {\n                $target\n                    .attr('unselectable', 'on')\n                    .css('MozUserSelect', 'none')\n                    .bind('selectstart.ui', function() { return false; }); // from jquery:ui.core.js 1.7.2\n            }\n        }\n\n        function getMaxSupportedCssHeight() {\n            var increment = 1000000;\n            var supportedHeight = increment;\n            // FF reports the height back but still renders blank after ~6M px\n            var testUpTo = ($.browser.mozilla) ? 5000000 : 1000000000;\n            var div = $(\"<div style='display:none' />\").appendTo(document.body);\n\n            while (supportedHeight <= testUpTo) {\n                div.css(\"height\", supportedHeight + increment);\n                if (div.height() !== supportedHeight + increment)\n                    break;\n                else\n                    supportedHeight += increment;\n            }\n\n            div.remove();\n            return supportedHeight;\n        }\n\n        // TODO:  this is static.  need to handle page mutation.\n        function bindAncestorScrollEvents() {\n            var elem = $canvas[0];\n            while ((elem = elem.parentNode) != document.body) {\n                // bind to scroll containers only\n                if (elem == $viewport[0] || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight)\n                    $(elem).bind(\"scroll.slickgrid\", handleActiveCellPositionChange);\n            }\n        }\n\n        function unbindAncestorScrollEvents() {\n            $canvas.parents().unbind(\"scroll.slickgrid\");\n        }\n\n        function updateColumnHeader(columnId, title, toolTip) {\n            var idx = getColumnIndex(columnId);\n            var $header = $headers.children().eq(idx);\n            if ($header) {\n                columns[idx].name = title;\n                columns[idx].toolTip = toolTip;\n                $header\n                    .attr(\"title\", toolTip || title || \"\")\n                    .children().eq(0).html(title);\n            }\n        }\n\n        function getHeaderRow() {\n            return $headerRow[0];\n        }\n\n        function getHeaderRowColumn(columnId) {\n            var idx = getColumnIndex(columnId);\n            var $header = $headerRow.children().eq(idx);\n            return $header && $header[0];\n        }\n\n        function createColumnHeaders() {\n            var i;\n\n            function hoverBegin() {\n                $(this).addClass(\"ui-state-hover\");\n            }\n            function hoverEnd() {\n                $(this).removeClass(\"ui-state-hover\");\n            }\n\n            $headers.empty();\n            $headerRow.empty();\n            columnsById = {};\n\n            for (i = 0; i < columns.length; i++) {\n                var m = columns[i] = $.extend({},columnDefaults,columns[i]);\n                columnsById[m.id] = i;\n\n                var header = $(\"<div class='ui-state-default slick-header-column' id='\" + uid + m.id + \"' />\")\n                    .html(\"<span class='slick-column-name'>\" + m.name + \"</span>\")\n                    .width(m.width - headerColumnWidthDiff)\n                    .attr(\"title\", m.toolTip || m.name || \"\")\n                    .data(\"fieldId\", m.id)\n                    .addClass(m.headerCssClass || \"\")\n                    .appendTo($headers);\n\n                if (options.enableColumnReorder || m.sortable) {\n                    header.hover(hoverBegin, hoverEnd);\n                }\n\n                if (m.sortable) {\n                    header.append(\"<span class='slick-sort-indicator' />\");\n                }\n\n                if (options.showHeaderRow) {\n                    $(\"<div class='ui-state-default slick-headerrow-column c\" + i + \"'></div>\").appendTo($headerRow);\n                }\n            }\n\n            setSortColumn(sortColumnId,sortAsc);\n            setupColumnResize();\n            if (options.enableColumnReorder) {\n                setupColumnReorder();\n            }\n        }\n\n        function setupColumnSort() {\n            $headers.click(function(e) {\n                if ($(e.target).hasClass(\"slick-resizable-handle\")) {\n                    return;\n                }\n\n                var $col = $(e.target).closest(\".slick-header-column\");\n                if (!$col.length)\n                    return;\n\n                var column = columns[getColumnIndex($col.data(\"fieldId\"))];\n                if (column.sortable) {\n                    if (!getEditorLock().commitCurrentEdit())\n                        return;\n\n                    if (column.id === sortColumnId) {\n                        sortAsc = !sortAsc;\n                    }\n                    else {\n                        sortColumnId = column.id;\n                        sortAsc = true;\n                    }\n\n                    setSortColumn(sortColumnId,sortAsc);\n                    trigger(self.onSort, {sortCol:column,sortAsc:sortAsc});\n                }\n            });\n        }\n\n        function setupColumnReorder() {\n            $headers.sortable({\n                containment: \"parent\",\n                axis: \"x\",\n                cursor: \"default\",\n                tolerance: \"intersection\",\n                helper: \"clone\",\n                placeholder: \"slick-sortable-placeholder ui-state-default slick-header-column\",\n                forcePlaceholderSize: true,\n                start: function(e, ui) { $(ui.helper).addClass(\"slick-header-column-active\"); },\n                beforeStop: function(e, ui) { $(ui.helper).removeClass(\"slick-header-column-active\"); },\n                stop: function(e) {\n                    if (!getEditorLock().commitCurrentEdit()) {\n                        $(this).sortable(\"cancel\");\n                        return;\n                    }\n\n                    var reorderedIds = $headers.sortable(\"toArray\");\n                    var reorderedColumns = [];\n                    for (var i=0; i<reorderedIds.length; i++) {\n                        reorderedColumns.push(columns[getColumnIndex(reorderedIds[i].replace(uid,\"\"))]);\n                    }\n                    setColumns(reorderedColumns);\n\n                    trigger(self.onColumnsReordered, {});\n                    e.stopPropagation();\n                    setupColumnResize();\n                }\n            });\n        }\n\n        function setupColumnResize() {\n            var $col, j, c, pageX, columnElements, minPageX, maxPageX, firstResizable, lastResizable, originalCanvasWidth;\n            columnElements = $headers.children();\n            columnElements.find(\".slick-resizable-handle\").remove();\n            columnElements.each(function(i,e) {\n                if (columns[i].resizable) {\n                    if (firstResizable === undefined) { firstResizable = i; }\n                    lastResizable = i;\n                }\n            });\n            if (firstResizable === undefined) {\n                return;\n            }\n            columnElements.each(function(i,e) {\n                if (i < firstResizable || (options.forceFitColumns && i >= lastResizable)) { return; }\n                $col = $(e);\n                $(\"<div class='slick-resizable-handle' />\")\n                    .appendTo(e)\n                    .bind(\"dragstart\", function(e,dd) {\n                        if (!getEditorLock().commitCurrentEdit()) { return false; }\n                        pageX = e.pageX;\n                        $(this).parent().addClass(\"slick-header-column-active\");\n                        var shrinkLeewayOnRight = null, stretchLeewayOnRight = null;\n                        // lock each column's width option to current width\n                        columnElements.each(function(i,e) { columns[i].previousWidth = $(e).outerWidth(); });\n                        if (options.forceFitColumns) {\n                            shrinkLeewayOnRight = 0;\n                            stretchLeewayOnRight = 0;\n                            // colums on right affect maxPageX/minPageX\n                            for (j = i + 1; j < columnElements.length; j++) {\n                                c = columns[j];\n                                if (c.resizable) {\n                                    if (stretchLeewayOnRight !== null) {\n                                        if (c.maxWidth) {\n                                            stretchLeewayOnRight += c.maxWidth - c.previousWidth;\n                                        }\n                                        else {\n                                            stretchLeewayOnRight = null;\n                                        }\n                                    }\n                                    shrinkLeewayOnRight += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n                                }\n                            }\n                        }\n                        var shrinkLeewayOnLeft = 0, stretchLeewayOnLeft = 0;\n                        for (j = 0; j <= i; j++) {\n                            // columns on left only affect minPageX\n                            c = columns[j];\n                            if (c.resizable) {\n                                if (stretchLeewayOnLeft !== null) {\n                                    if (c.maxWidth) {\n                                        stretchLeewayOnLeft += c.maxWidth - c.previousWidth;\n                                    }\n                                    else {\n                                        stretchLeewayOnLeft = null;\n                                    }\n                                }\n                                shrinkLeewayOnLeft += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n                            }\n                        }\n                        if (shrinkLeewayOnRight === null) { shrinkLeewayOnRight = 100000; }\n                        if (shrinkLeewayOnLeft === null) { shrinkLeewayOnLeft = 100000; }\n                        if (stretchLeewayOnRight === null) { stretchLeewayOnRight = 100000; }\n                        if (stretchLeewayOnLeft === null) { stretchLeewayOnLeft = 100000; }\n                        maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\n                        minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\n                        originalCanvasWidth = $canvas.width();\n                    })\n                    .bind(\"drag\", function(e,dd) {\n                        var actualMinWidth, d = Math.min(maxPageX, Math.max(minPageX, e.pageX)) - pageX, x, ci;\n                        if (d < 0) { // shrink column\n                            x = d;\n                            for (j = i; j >= 0; j--) {\n                                c = columns[j];\n                                if (c.resizable) {\n                                    actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n                                    if (x && c.previousWidth + x < actualMinWidth) {\n                                        x += c.previousWidth - actualMinWidth;\n                                        c.width = actualMinWidth;\n                                    } else {\n                                        c.width = c.previousWidth + x;\n                                        x = 0;\n                                    }\n                                }\n                            }\n\n                            if (options.forceFitColumns) {\n                                x = -d;\n                                for (j = i + 1; j < columnElements.length; j++) {\n                                    c = columns[j];\n                                    if (c.resizable) {\n                                        if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {\n                                            x -= c.maxWidth - c.previousWidth;\n                                            c.width = c.maxWidth;\n                                        } else {\n                                            c.width =  c.previousWidth + x;\n                                            x = 0;\n                                        }\n                                    }\n                                }\n                            } else if (options.syncColumnCellResize) {\n                                setCanvasWidth(originalCanvasWidth + d);\n                            }\n                        } else { // stretch column\n                            x = d;\n                            for (j = i; j >= 0; j--) {\n                                c = columns[j];\n                                if (c.resizable) {\n                                    if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {\n                                        x -= c.maxWidth - c.previousWidth;\n                                        c.width = c.maxWidth;\n                                    } else {\n                                        c.width = c.previousWidth + x;\n                                        x = 0;\n                                    }\n                                }\n                            }\n\n                            if (options.forceFitColumns) {\n                                x = -d;\n                                for (j = i + 1; j < columnElements.length; j++) {\n                                    c = columns[j];\n                                    if (c.resizable) {\n                                        actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n                                        if (x && c.previousWidth + x < actualMinWidth) {\n                                            x += c.previousWidth - actualMinWidth;\n                                            c.width = actualMinWidth;\n                                        } else {\n                                            c.width = c.previousWidth + x;\n                                            x = 0;\n                                        }\n                                    }\n                                }\n                            } else if (options.syncColumnCellResize) {\n                                setCanvasWidth(originalCanvasWidth + d);\n                            }\n                        }\n                        applyColumnHeaderWidths();\n                        if (options.syncColumnCellResize) {\n                            applyColumnWidths();\n                        }\n                    })\n                    .bind(\"dragend\", function(e,dd) {\n                        var newWidth;\n                        $(this).parent().removeClass(\"slick-header-column-active\");\n                        for (j = 0; j < columnElements.length; j++) {\n                            c = columns[j];\n                            newWidth = $(columnElements[j]).outerWidth();\n\n                            if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n                                invalidateAllRows();\n                            }\n                        }\n                        applyColumnWidths();\n                        resizeCanvas();\n                        trigger(self.onColumnsResized, {});\n                    });\n                });\n        }\n\n        function getVBoxDelta($el) {\n            var p = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"];\n            var delta = 0;\n            $.each(p, function(n,val) { delta += parseFloat($el.css(val)) || 0; });\n            return delta;\n        }\n\n        function measureCellPaddingAndBorder() {\n            var el;\n            var h = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"];\n            var v = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"];\n\n            el = $(\"<div class='ui-state-default slick-header-column' style='visibility:hidden'>-</div>\").appendTo($headers);\n            headerColumnWidthDiff = headerColumnHeightDiff = 0;\n            $.each(h, function(n,val) { headerColumnWidthDiff += parseFloat(el.css(val)) || 0; });\n            $.each(v, function(n,val) { headerColumnHeightDiff += parseFloat(el.css(val)) || 0; });\n            el.remove();\n\n            var r = $(\"<div class='slick-row' />\").appendTo($canvas);\n            el = $(\"<div class='slick-cell' id='' style='visibility:hidden'>-</div>\").appendTo(r);\n            cellWidthDiff = cellHeightDiff = 0;\n            $.each(h, function(n,val) { cellWidthDiff += parseFloat(el.css(val)) || 0; });\n            $.each(v, function(n,val) { cellHeightDiff += parseFloat(el.css(val)) || 0; });\n            r.remove();\n\n            absoluteColumnMinWidth = Math.max(headerColumnWidthDiff,cellWidthDiff);\n        }\n\n        function createCssRules() {\n            $style = $(\"<style type='text/css' rel='stylesheet' />\").appendTo($(\"head\"));\n            var rowHeight = (options.rowHeight - cellHeightDiff);\n\n            var rules = [\n                \".\" + uid + \" .slick-header-column { left: 1000px; }\",\n                \".\" + uid + \" .slick-top-panel { height:\" + options.topPanelHeight + \"px; }\",\n                \".\" + uid + \" .slick-headerrow-columns { height:\" + options.headerRowHeight + \"px; }\",\n                \".\" + uid + \" .slick-cell { height:\" + rowHeight + \"px; }\",\n                \".\" + uid + \" .slick-row { width:\" + getRowWidth() + \"px; }\",\n                \".\" + uid + \" .lr { float:none; position:absolute; }\"\n            ];\n\n            var rowWidth = getRowWidth();\n            var x = 0, w;\n            for (var i=0; i<columns.length; i++) {\n                w = columns[i].width;\n\n                rules.push(\".\" + uid + \" .l\" + i + \" { left: \" + x + \"px; }\");\n                rules.push(\".\" + uid + \" .r\" + i + \" { right: \" + (rowWidth - x - w) + \"px; }\");\n                rules.push(\".\" + uid + \" .c\" + i + \" { width:\" + (w - cellWidthDiff) + \"px; }\");\n\n                x += columns[i].width;\n            }\n\n            if ($style[0].styleSheet) { // IE\n                $style[0].styleSheet.cssText = rules.join(\" \");\n            }\n            else {\n                $style[0].appendChild(document.createTextNode(rules.join(\" \")));\n            }\n\n            var sheets = document.styleSheets;\n            for (var i=0; i<sheets.length; i++) {\n                if ((sheets[i].ownerNode || sheets[i].owningElement) == $style[0]) {\n                    stylesheet = sheets[i];\n                    break;\n                }\n            }\n        }\n\n        function findCssRule(selector) {\n            var rules = (stylesheet.cssRules || stylesheet.rules);\n\n            for (var i=0; i<rules.length; i++) {\n                if (rules[i].selectorText == selector)\n                    return rules[i];\n            }\n\n            return null;\n        }\n\n        function removeCssRules() {\n            $style.remove();\n        }\n\n        function destroy() {\n            getEditorLock().cancelCurrentEdit();\n\n            trigger(self.onBeforeDestroy, {});\n\n            for (var i = 0; i < plugins.length; i++) {\n                unregisterPlugin(plugins[i]);\n            }\n\n            if (options.enableColumnReorder && $headers.sortable)\n                $headers.sortable(\"destroy\");\n\n            unbindAncestorScrollEvents();\n            $container.unbind(\".slickgrid\");\n            removeCssRules();\n\n            $canvas.unbind(\"draginit dragstart dragend drag\");\n            $container.empty().removeClass(uid);\n        }\n\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // General\n\n        function trigger(evt, args, e) {\n            e = e || new Slick.EventData();\n            args = args || {};\n            args.grid = self;\n            return evt.notify(args, e, self);\n        }\n\n        function getEditorLock() {\n            return options.editorLock;\n        }\n\n        function getEditController() {\n            return editController;\n        }\n\n        function getColumnIndex(id) {\n            return columnsById[id];\n        }\n\n        function autosizeColumns() {\n            var i, c,\n                widths = [],\n                shrinkLeeway = 0,\n                availWidth = (options.autoHeight ? viewportW : viewportW - scrollbarDimensions.width), // with AutoHeight, we do not need to accomodate the vertical scroll bar\n                total = 0,\n                existingTotal = 0;\n\n            for (i = 0; i < columns.length; i++) {\n                c = columns[i];\n                widths.push(c.width);\n                existingTotal += c.width;\n                shrinkLeeway += c.width - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\n            }\n\n            total = existingTotal;\n\n            invalidateAllRows();\n\n            // shrink\n            while (total > availWidth) {\n                if (!shrinkLeeway) { return; }\n                var shrinkProportion = (total - availWidth) / shrinkLeeway;\n                for (i = 0; i < columns.length && total > availWidth; i++) {\n                    c = columns[i];\n                    if (!c.resizable || c.minWidth === c.width || c.width === absoluteColumnMinWidth) { continue; }\n                    var shrinkSize = Math.floor(shrinkProportion * (c.width - Math.max(c.minWidth || 0, absoluteColumnMinWidth))) || 1;\n                    total -= shrinkSize;\n                    widths[i] -= shrinkSize;\n                }\n            }\n\n            // grow\n            var previousTotal = total;\n            while (total < availWidth) {\n                var growProportion = availWidth / total;\n                for (i = 0; i < columns.length && total < availWidth; i++) {\n                    c = columns[i];\n                    if (!c.resizable || c.maxWidth <= c.width) { continue; }\n                    var growSize = Math.min(Math.floor(growProportion * c.width) - c.width, (c.maxWidth - c.width) || 1000000) || 1;\n                    total += growSize;\n                    widths[i] += growSize;\n                }\n                if (previousTotal == total) break; // if total is not changing, will result in infinite loop\n                previousTotal = total;\n            }\n\n            for (i=0; i<columns.length; i++) {\n                columns[i].width = widths[i];\n            }\n\n            applyColumnHeaderWidths();\n            applyColumnWidths();\n            resizeCanvas();\n        }\n\n        function applyColumnHeaderWidths() {\n            var h;\n            for (var i = 0, headers = $headers.children(), ii = headers.length; i < ii; i++) {\n                h = $(headers[i]);\n                if (h.width() !== columns[i].width - headerColumnWidthDiff) {\n                    h.width(columns[i].width - headerColumnWidthDiff);\n                }\n            }\n        }\n\n        function applyColumnWidths() {\n            var rowWidth = getRowWidth();\n            var x = 0, w, rule;\n            for (var i = 0; i < columns.length; i++) {\n                w = columns[i].width;\n\n                rule = findCssRule(\".\" + uid + \" .c\" + i);\n                rule.style.width = (w - cellWidthDiff) + \"px\";\n\n                rule = findCssRule(\".\" + uid + \" .l\" + i);\n                rule.style.left = x + \"px\";\n\n                rule = findCssRule(\".\" + uid + \" .r\" + i);\n                rule.style.right = (rowWidth - x - w) + \"px\";\n\n                x += columns[i].width;\n            }\n\n            rule = findCssRule(\".\" + uid + \" .slick-row\");\n            rule.style.width = rowWidth + \"px\";\n        }\n\n        function setSortColumn(columnId, ascending) {\n            sortColumnId = columnId;\n            sortAsc = ascending;\n            var columnIndex = getColumnIndex(sortColumnId);\n\n            $headers.children().removeClass(\"slick-header-column-sorted\");\n            $headers.find(\".slick-sort-indicator\").removeClass(\"slick-sort-indicator-asc slick-sort-indicator-desc\");\n\n            if (columnIndex != null) {\n                $headers.children().eq(columnIndex)\n                    .addClass(\"slick-header-column-sorted\")\n                    .find(\".slick-sort-indicator\")\n                        .addClass(sortAsc ? \"slick-sort-indicator-asc\" : \"slick-sort-indicator-desc\");\n            }\n        }\n\n        function handleSelectedRangesChanged(e, ranges) {\n            selectedRows = [];\n            var hash = {};\n            for (var i = 0; i < ranges.length; i++) {\n                for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n                    if (!hash[j]) {  // prevent duplicates\n                        selectedRows.push(j);\n                    }\n                    hash[j] = {};\n                    for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n                        if (canCellBeSelected(j, k)) {\n                            hash[j][columns[k].id] = options.selectedCellCssClass;\n                        }\n                    }\n                }\n            }\n\n            setCellCssStyles(options.selectedCellCssClass, hash);\n\n            trigger(self.onSelectedRowsChanged, {rows:getSelectedRows()}, e);\n        }\n\n        function getColumns() {\n            return columns;\n        }\n\n        function setColumns(columnDefinitions) {\n            columns = columnDefinitions;\n            invalidateAllRows();\n            createColumnHeaders();\n            removeCssRules();\n            createCssRules();\n            resizeAndRender();\n            handleScroll();\n        }\n\n        function getOptions() {\n            return options;\n        }\n\n        function setOptions(args) {\n            if (!getEditorLock().commitCurrentEdit()) {\n                return;\n            }\n\n            makeActiveCellNormal();\n\n            if (options.enableAddRow !== args.enableAddRow) {\n                invalidateRow(getDataLength());\n            }\n\n            options = $.extend(options,args);\n\n            render();\n        }\n\n        function setData(newData,scrollToTop) {\n            invalidateAllRows();\n            data = newData;\n            if (scrollToTop)\n                scrollTo(0);\n        }\n\n        function getData() {\n            return data;\n        }\n\n        function getDataLength() {\n            if (data.getLength) {\n                return data.getLength();\n            }\n            else {\n                return data.length;\n            }\n        }\n\n        function getDataItem(i) {\n            if (data.getItem) {\n                return data.getItem(i);\n            }\n            else {\n                return data[i];\n            }\n        }\n\n        function getTopPanel() {\n            return $topPanel[0];\n        }\n\n        function showTopPanel() {\n            options.showTopPanel = true;\n            $topPanelScroller.slideDown(\"fast\", resizeCanvas);\n        }\n\n        function hideTopPanel() {\n            options.showTopPanel = false;\n            $topPanelScroller.slideUp(\"fast\", resizeCanvas);\n        }\n\n        function showHeaderRowColumns() {\n            options.showHeaderRow = true;\n            $headerRowScroller.slideDown(\"fast\", resizeCanvas);\n        }\n\n        function hideHeaderRowColumns() {\n            options.showHeaderRow = false;\n            $headerRowScroller.slideUp(\"fast\", resizeCanvas);\n        }\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Rendering / Scrolling\n\n        function scrollTo(y) {\n            var oldOffset = offset;\n\n            page = Math.min(n-1, Math.floor(y / ph));\n            offset = Math.round(page * cj);\n            var newScrollTop = y - offset;\n\n            if (offset != oldOffset) {\n                var range = getVisibleRange(newScrollTop);\n                cleanupRows(range.top,range.bottom);\n                updateRowPositions();\n            }\n\n            if (prevScrollTop != newScrollTop) {\n                scrollDir = (prevScrollTop + oldOffset < newScrollTop + offset) ? 1 : -1;\n                $viewport[0].scrollTop = (lastRenderedScrollTop = scrollTop = prevScrollTop = newScrollTop);\n\n                trigger(self.onViewportChanged, {});\n            }\n        }\n\n        function defaultFormatter(row, cell, value, columnDef, dataContext) {\n            return (value === null || value === undefined) ? \"\" : value;\n        }\n\n        function getFormatter(row, column) {\n            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n\n            // look up by id, then index\n            var columnOverrides = rowMetadata &&\n                    rowMetadata.columns &&\n                    (rowMetadata.columns[column.id] || rowMetadata.columns[getColumnIndex(column.id)]);\n\n            return (columnOverrides && columnOverrides.formatter) ||\n                    (rowMetadata && rowMetadata.formatter) ||\n                    column.formatter ||\n                    (options.formatterFactory && options.formatterFactory.getFormatter(column)) ||\n                    defaultFormatter;\n        }\n\n        function getEditor(row, cell) {\n            var column = columns[cell];\n            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n            var columnMetadata = rowMetadata && rowMetadata.columns;\n\n            if (columnMetadata && columnMetadata[column.id] && columnMetadata[column.id].editor !== undefined) {\n                return columnMetadata[column.id].editor;\n            }\n            if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].editor !== undefined) {\n                return columnMetadata[cell].editor;\n            }\n\n            return column.editor || (options.editorFactory && options.editorFactory.getEditor(column));\n        }\n\n        function appendRowHtml(stringArray, row) {\n            var d = getDataItem(row);\n            var dataLoading = row < getDataLength() && !d;\n            var cellCss;\n            var rowCss = \"slick-row \" +\n                (dataLoading ? \" loading\" : \"\") +\n                (row % 2 == 1 ? ' odd' : ' even');\n\n            var metadata = data.getItemMetadata && data.getItemMetadata(row);\n\n            if (metadata && metadata.cssClasses) {\n                rowCss += \" \" + metadata.cssClasses;\n            }\n\n            stringArray.push(\"<div class='ui-widget-content \" + rowCss + \"' row='\" + row + \"' style='top:\" + (options.rowHeight*row-offset) + \"px'>\");\n\n            var colspan;\n            var rowHasColumnData = metadata && metadata.columns;\n\n            for (var i=0, cols=columns.length; i<cols; i++) {\n                var m = columns[i];\n                colspan = getColspan(row, i);  // TODO:  don't calc unless we have to\n\n                if (true || rowHasColumnData) {\n                    cellCss = \"slick-cell lr l\" + i + \" r\" + Math.min(columns.length -1, i + colspan - 1) + (m.cssClass ? \" \" + m.cssClass : \"\");\n                }\n                else {\n                    cellCss = \"slick-cell c\" + i + (m.cssClass ? \" \" + m.cssClass : \"\");\n                }\n\n                if (row === activeRow && i === activeCell) {\n                    cellCss += (\" active\");\n                }\n\n                // TODO:  merge them together in the setter\n                for (var key in cellCssClasses) {\n                    if (cellCssClasses[key][row] && cellCssClasses[key][row][m.id]) {\n                        cellCss += (\" \" + cellCssClasses[key][row][m.id]);\n                    }\n                }\n\n                stringArray.push(\"<div class='\" + cellCss + \"'>\");\n\n                // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n                if (d) {\n                    stringArray.push(getFormatter(row, m)(row, i, d[m.field], m, d));\n                }\n\n                stringArray.push(\"</div>\");\n\n                if (colspan)\n                    i += (colspan - 1);\n            }\n\n            stringArray.push(\"</div>\");\n        }\n\n        function cleanupRows(rangeToKeep) {\n            for (var i in rowsCache) {\n                if (((i = parseInt(i, 10)) !== activeRow) && (i < rangeToKeep.top || i > rangeToKeep.bottom)) {\n                    removeRowFromCache(i);\n                }\n            }\n        }\n\n        function invalidate() {\n           updateRowCount();\n           invalidateAllRows();\n           render();\n        }\n\n        function invalidateAllRows() {\n            if (currentEditor) {\n                makeActiveCellNormal();\n            }\n            for (var row in rowsCache) {\n                removeRowFromCache(row);\n            }\n        }\n\n        function removeRowFromCache(row) {\n            var node = rowsCache[row];\n            if (!node) { return; }\n            $canvas[0].removeChild(node);\n\n            delete rowsCache[row];\n            delete postProcessedRows[row];\n            renderedRows--;\n            counter_rows_removed++;\n        }\n\n        function invalidateRows(rows) {\n            var i, rl;\n            if (!rows || !rows.length) { return; }\n            scrollDir = 0;\n            for (i=0, rl=rows.length; i<rl; i++) {\n                if (currentEditor && activeRow === i) {\n                    makeActiveCellNormal();\n                }\n\n                if (rowsCache[rows[i]]) {\n                    removeRowFromCache(rows[i]);\n                }\n            }\n        }\n\n        function invalidateRow(row) {\n            invalidateRows([row]);\n        }\n\n        function updateCell(row,cell) {\n            var cellNode = getCellNode(row,cell);\n            if (!cellNode) {\n                return;\n            }\n\n            var m = columns[cell], d = getDataItem(row);\n            if (currentEditor && activeRow === row && activeCell === cell) {\n                currentEditor.loadValue(d);\n            }\n            else {\n                cellNode.innerHTML = d ? getFormatter(row, m)(row, cell, d[m.field], m, d) : \"\";\n                invalidatePostProcessingResults(row);\n            }\n        }\n\n        function updateRow(row) {\n            if (!rowsCache[row]) { return; }\n\n            $(rowsCache[row]).children().each(function(i) {\n                var m = columns[i];\n                if (row === activeRow && i === activeCell && currentEditor) {\n                    currentEditor.loadValue(getDataItem(activeRow));\n                }\n                else if (getDataItem(row)) {\n                    this.innerHTML = getFormatter(row, m)(row, i, getDataItem(row)[m.field], m, getDataItem(row));\n                }\n                else {\n                    this.innerHTML = \"\";\n                }\n            });\n\n            invalidatePostProcessingResults(row);\n        }\n\n        function getViewportHeight() {\n            return parseFloat($.css($container[0], \"height\", true)) -\n                options.headerHeight -\n                getVBoxDelta($headers) -\n                (options.showTopPanel ? options.topPanelHeight + getVBoxDelta($topPanelScroller) : 0) -\n                (options.showHeaderRow ? options.headerRowHeight + getVBoxDelta($headerRowScroller) : 0);\n        }\n\n        function resizeCanvas() {\n            if (options.autoHeight) {\n                viewportH = options.rowHeight * (getDataLength() + (options.enableAddRow ? 1 : 0) + (options.leaveSpaceForNewRows? numVisibleRows - 1 : 0));\n            }\n            else {\n                viewportH = getViewportHeight();\n            }\n\n            numVisibleRows = Math.ceil(viewportH / options.rowHeight);\n            viewportW = parseFloat($.css($container[0], \"width\", true));\n            $viewport.height(viewportH);\n\n            var w = 0, i = columns.length;\n            while (i--) {\n                w += columns[i].width;\n            }\n            setCanvasWidth(w);\n\n            updateRowCount();\n            render();\n        }\n\n        function resizeAndRender() {\n            if (options.forceFitColumns) {\n                autosizeColumns();\n            } else {\n                resizeCanvas();\n            }\n        }\n\n        function updateRowCount() {\n            var newRowCount = getDataLength() + (options.enableAddRow?1:0) + (options.leaveSpaceForNewRows?numVisibleRows-1:0);\n            var oldH = h;\n\n            // remove the rows that are now outside of the data range\n            // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n            var l = options.enableAddRow ? getDataLength() : getDataLength() - 1;\n            for (var i in rowsCache) {\n                if (i >= l) {\n                    removeRowFromCache(i);\n                }\n            }\n            th = Math.max(options.rowHeight * newRowCount, viewportH - scrollbarDimensions.height);\n            if (th < maxSupportedCssHeight) {\n                // just one page\n                h = ph = th;\n                n = 1;\n                cj = 0;\n            }\n            else {\n                // break into pages\n                h = maxSupportedCssHeight;\n                ph = h / 100;\n                n = Math.floor(th / ph);\n                cj = (th - h) / (n - 1);\n            }\n\n            if (h !== oldH) {\n                $canvas.css(\"height\",h);\n                scrollTop = $viewport[0].scrollTop;\n            }\n\n            var oldScrollTopInRange = (scrollTop + offset <= th - viewportH);\n\n            if (th == 0 || scrollTop == 0) {\n                page = offset = 0;\n            }\n            else if (oldScrollTopInRange) {\n                // maintain virtual position\n                scrollTo(scrollTop+offset);\n            }\n            else {\n                // scroll to bottom\n                scrollTo(th-viewportH);\n            }\n\n            if (h != oldH && options.autoHeight) {\n                resizeCanvas();\n            }\n        }\n\n        function getVisibleRange(viewportTop) {\n            if (viewportTop == null)\n                viewportTop = scrollTop;\n\n            return {\n                top: Math.floor((scrollTop+offset)/options.rowHeight),\n                bottom: Math.ceil((scrollTop+offset+viewportH)/options.rowHeight)\n            };\n        }\n\n        function getRenderedRange(viewportTop) {\n            var range = getVisibleRange(viewportTop);\n            var buffer = Math.round(viewportH/options.rowHeight);\n            var minBuffer = 3;\n\n            if (scrollDir == -1) {\n                range.top -= buffer;\n                range.bottom += minBuffer;\n            }\n            else if (scrollDir == 1) {\n                range.top -= minBuffer;\n                range.bottom += buffer;\n            }\n            else {\n                range.top -= minBuffer;\n                range.bottom += minBuffer;\n            }\n\n            range.top = Math.max(0,range.top);\n            range.bottom = Math.min(options.enableAddRow ? getDataLength() : getDataLength() - 1,range.bottom);\n\n            return range;\n        }\n\n        function renderRows(range) {\n            var i, l,\n                parentNode = $canvas[0],\n                rowsBefore = renderedRows,\n                stringArray = [],\n                rows = [],\n                startTimestamp = new Date(),\n                needToReselectCell = false;\n\n            for (i = range.top; i <= range.bottom; i++) {\n                if (rowsCache[i]) { continue; }\n                renderedRows++;\n                rows.push(i);\n                appendRowHtml(stringArray,i);\n                if (activeCellNode && activeRow === i) {\n                    needToReselectCell = true;\n                }\n                counter_rows_rendered++;\n            }\n\n            var x = document.createElement(\"div\");\n            x.innerHTML = stringArray.join(\"\");\n\n// XXX ree@greenfinity.hu fix IE?\n\n            var i=0;\n            while (x.firstChild) {\n            //for (i = 0, l = x.childNodes.length; i < l; i++) {\n                try {\n                rowsCache[rows[i]] = parentNode.appendChild(x.firstChild);\n                i += 1\n                } catch(e) {\n                    var _debug = 123;\n                    throw(e);\n                }\n            }\n// XXX END\n\n            if (needToReselectCell) {\n                activeCellNode = getCellNode(activeRow,activeCell);\n            }\n\n            if (renderedRows - rowsBefore > 5) {\n                avgRowRenderTime = (new Date() - startTimestamp) / (renderedRows - rowsBefore);\n            }\n        }\n\n        function startPostProcessing() {\n            if (!options.enableAsyncPostRender) { return; }\n            clearTimeout(h_postrender);\n            h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);\n        }\n\n        function invalidatePostProcessingResults(row) {\n            delete postProcessedRows[row];\n            postProcessFromRow = Math.min(postProcessFromRow,row);\n            postProcessToRow = Math.max(postProcessToRow,row);\n            startPostProcessing();\n        }\n\n        function updateRowPositions() {\n            for (var row in rowsCache) {\n                rowsCache[row].style.top = (row*options.rowHeight-offset) + \"px\";\n            }\n        }\n\n        function render() {\n            var visible = getVisibleRange();\n            var rendered = getRenderedRange();\n\n            // remove rows no longer in the viewport\n            cleanupRows(rendered);\n\n            // add new rows\n            renderRows(rendered);\n\n            postProcessFromRow = visible.top;\n            postProcessToRow = Math.min(options.enableAddRow ? getDataLength() : getDataLength() - 1, visible.bottom);\n            startPostProcessing();\n\n            lastRenderedScrollTop = scrollTop;\n            h_render = null;\n        }\n\n        function handleScroll() {\n            scrollTop = $viewport[0].scrollTop;\n            var scrollLeft = $viewport[0].scrollLeft;\n            var scrollDist = Math.abs(scrollTop - prevScrollTop);\n\n            if (scrollLeft !== prevScrollLeft) {\n                prevScrollLeft = scrollLeft;\n                $headerScroller[0].scrollLeft = scrollLeft;\n                $topPanelScroller[0].scrollLeft = scrollLeft;\n                $headerRowScroller[0].scrollLeft = scrollLeft;\n            }\n\n            if (scrollDist) {\n                scrollDir = prevScrollTop < scrollTop ? 1 : -1;\n                prevScrollTop = scrollTop;\n\n                // switch virtual pages if needed\n                if (scrollDist < viewportH) {\n                    scrollTo(scrollTop + offset);\n                }\n                else {\n                    var oldOffset = offset;\n                    page = Math.min(n - 1, Math.floor(scrollTop * ((th - viewportH) / (h - viewportH)) * (1 / ph)));\n                    offset = Math.round(page * cj);\n                    if (oldOffset != offset)\n                        invalidateAllRows();\n                }\n\n                if (h_render)\n                    clearTimeout(h_render);\n\n                if (Math.abs(lastRenderedScrollTop - scrollTop) < viewportH)\n                    render();\n                else\n                    h_render = setTimeout(render, 50);\n\n                trigger(self.onViewportChanged, {});\n            }\n\n            trigger(self.onScroll, {scrollLeft:scrollLeft, scrollTop:scrollTop});\n        }\n\n        function asyncPostProcessRows() {\n            while (postProcessFromRow <= postProcessToRow) {\n                var row = (scrollDir >= 0) ? postProcessFromRow++ : postProcessToRow--;\n                var rowNode = rowsCache[row];\n                if (!rowNode || postProcessedRows[row] || row>=getDataLength()) { continue; }\n\n                var d = getDataItem(row), cellNodes = rowNode.childNodes;\n                for (var i=0, j=0, l=columns.length; i<l; ++i) {\n                    var m = columns[i];\n                    if (m.asyncPostRender) { m.asyncPostRender(cellNodes[j], postProcessFromRow, d, m); }\n                    ++j;\n                }\n\n                postProcessedRows[row] = true;\n                h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);\n                return;\n            }\n        }\n\n        function addCellCssStyles(key,hash) {\n            if (cellCssClasses[key]) {\n                throw \"addCellCssStyles: cell CSS hash with key '\" + key + \"' already exists.\";\n            }\n\n            cellCssClasses[key] = hash;\n\n            var node;\n            for (var row in rowsCache) {\n                if (hash[row]) {\n                    for (var columnId in hash[row]) {\n                        node = getCellNode(row, getColumnIndex(columnId));\n                        if (node) {\n                            $(node).addClass(hash[row][columnId]);\n                        }\n                    }\n                }\n            }\n        }\n\n        function removeCellCssStyles(key) {\n            if (!cellCssClasses[key]) {\n                return;\n            }\n\n            var node;\n            for (var row in rowsCache) {\n                if (cellCssClasses[key][row]) {\n                    for (var columnId in cellCssClasses[key][row]) {\n                        node = getCellNode(row, getColumnIndex(columnId));\n                        if (node) {\n                            $(node).removeClass(cellCssClasses[key][row][columnId]);\n                        }\n                    }\n                }\n            }\n\n            delete cellCssClasses[key];\n        }\n\n        function setCellCssStyles(key,hash) {\n            removeCellCssStyles(key);\n            addCellCssStyles(key,hash);\n        }\n\n        function flashCell(row, cell, speed) {\n            speed = speed || 100;\n            if (rowsCache[row]) {\n                var $cell = $(getCellNode(row,cell));\n\n                function toggleCellClass(times) {\n                    if (!times) return;\n                    setTimeout(function() {\n                        $cell.queue(function() {\n                            $cell.toggleClass(options.cellFlashingCssClass).dequeue();\n                            toggleCellClass(times-1);\n                        });\n                    },\n                    speed);\n                }\n\n                toggleCellClass(4);\n            }\n        }\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Interactivity\n\n        function handleDragInit(e,dd) {\n            var cell = getCellFromEvent(e);\n            if (!cell || !cellExists(cell.row, cell.cell)) {\n                return false;\n            }\n\n            retval = trigger(self.onDragInit, dd, e);\n            if (e.isImmediatePropagationStopped()) {\n                return retval;\n            }\n\n            // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n            // cancel out of it\n            return false;\n        }\n\n        function handleDragStart(e,dd) {\n            var cell = getCellFromEvent(e);\n            if (!cell || !cellExists(cell.row, cell.cell)) {\n                return false;\n            }\n\n            var retval = trigger(self.onDragStart, dd, e);\n            if (e.isImmediatePropagationStopped()) {\n                return retval;\n            }\n\n            return false;\n        }\n\n        function handleDrag(e,dd) {\n            return trigger(self.onDrag, dd, e);\n        }\n\n        function handleDragEnd(e,dd) {\n            trigger(self.onDragEnd, dd, e);\n        }\n\n        function handleKeyDown(e) {\n            trigger(self.onKeyDown, {}, e);\n            var handled = e.isImmediatePropagationStopped();\n\n            if (!handled) {\n                if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n                    if (e.which == 27) {\n                        if (!getEditorLock().isActive()) {\n                            return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n                        }\n                        cancelEditAndSetFocus();\n                    }\n                    else if (e.which == 37) {\n                        navigateLeft();\n                    }\n                    else if (e.which == 39) {\n                        navigateRight();\n                    }\n                    else if (e.which == 38) {\n                        navigateUp();\n                    }\n                    else if (e.which == 40) {\n                        navigateDown();\n                    }\n                    else if (e.which == 9) {\n                        navigateNext();\n                    }\n                    else if (e.which == 13) {\n                        if (options.editable) {\n                            if (currentEditor) {\n                                // adding new row\n                                if (activeRow === getDataLength()) {\n                                    navigateDown();\n                                }\n                                else {\n                                    commitEditAndSetFocus();\n                                }\n                            } else {\n                                if (getEditorLock().commitCurrentEdit()) {\n                                    makeActiveCellEditable();\n                                }\n                            }\n                        }\n                    }\n                    else\n                        return;\n                }\n                else if (e.which == 9 && e.shiftKey && !e.ctrlKey && !e.altKey) {\n                    navigatePrev();\n                }\n                else\n                    return;\n            }\n\n            // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n            e.stopPropagation();\n            e.preventDefault();\n            try {\n                e.originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n            }\n            catch (error) {} // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\" (hitting control key only, nothing else), \"Shift\" (maybe others)\n        }\n\n        function handleClick(e) {\n            var cell = getCellFromEvent(e);\n            if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {\n                return;\n            }\n\n            trigger(self.onClick, {row:cell.row, cell:cell.cell}, e);\n            if (e.isImmediatePropagationStopped()) {\n                return;\n            }\n\n            if (canCellBeActive(cell.row, cell.cell)) {\n                if (!getEditorLock().isActive() || getEditorLock().commitCurrentEdit()) {\n                    scrollRowIntoView(cell.row,false);\n                    setActiveCellInternal(getCellNode(cell.row,cell.cell), (cell.row === getDataLength()) || options.autoEdit);\n                }\n            }\n        }\n\n        function handleContextMenu(e) {\n            var $cell = $(e.target).closest(\".slick-cell\", $canvas);\n            if ($cell.length === 0) { return; }\n\n            // are we editing this cell?\n            if (activeCellNode === $cell[0] && currentEditor !== null) { return; }\n\n            trigger(self.onContextMenu, {}, e);\n        }\n\n        function handleDblClick(e) {\n            var cell = getCellFromEvent(e);\n            if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {\n                return;\n            }\n\n            trigger(self.onDblClick, {row:cell.row, cell:cell.cell}, e);\n            if (e.isImmediatePropagationStopped()) {\n                return;\n            }\n\n            if (options.editable) {\n                gotoCell(cell.row, cell.cell, true);\n            }\n        }\n\n        function handleHeaderContextMenu(e) {\n            var $header = $(e.target).closest(\".slick-header-column\", \".slick-header-columns\");\n            var column = $header && columns[self.getColumnIndex($header.data(\"fieldId\"))];\n            trigger(self.onHeaderContextMenu, {column: column}, e);\n        }\n\n        function handleHeaderClick(e) {\n            var $header = $(e.target).closest(\".slick-header-column\", \".slick-header-columns\");\n            var column = $header && columns[self.getColumnIndex($header.data(\"fieldId\"))];\n            trigger(self.onHeaderClick, {column: column}, e);\n        }\n\n        function handleMouseEnter(e) {\n            trigger(self.onMouseEnter, {}, e);\n        }\n\n        function handleMouseLeave(e) {\n            trigger(self.onMouseLeave, {}, e);\n        }\n\n        function cellExists(row,cell) {\n            return !(row < 0 || row >= getDataLength() || cell < 0 || cell >= columns.length);\n        }\n\n        function getCellFromPoint(x,y) {\n            var row = Math.floor((y+offset)/options.rowHeight);\n            var cell = 0;\n\n            var w = 0;\n            for (var i=0; i<columns.length && w<x; i++) {\n                w += columns[i].width;\n                cell++;\n            }\n\n            if (cell < 0) {\n                cell = 0;\n            }\n\n            return {row:row,cell:cell-1};\n        }\n\n        function getCellFromNode(node) {\n            // read column number from .l1 or .c1 CSS classes\n            var cls = /l\\d+/.exec(node.className) || /c\\d+/.exec(node.className);\n            if (!cls)\n                throw \"getCellFromNode: cannot get cell - \" + node.className;\n            return parseInt(cls[0].substr(1, cls[0].length-1), 10);\n        }\n\n        function getCellFromEvent(e) {\n            var $cell = $(e.target).closest(\".slick-cell\", $canvas);\n            if (!$cell.length)\n                return null;\n\n            return {\n                row: $cell.parent().attr(\"row\") | 0,\n                cell: getCellFromNode($cell[0])\n            };\n        }\n\n        function getCellNodeBox(row,cell) {\n             if (!cellExists(row,cell))\n                 return null;\n\n             var y1 = row * options.rowHeight - offset;\n             var y2 = y1 + options.rowHeight - 1;\n             var x1 = 0;\n             for (var i=0; i<cell; i++) {\n                 x1 += columns[i].width;\n             }\n             var x2 = x1 + columns[cell].width;\n\n             return {\n                 top: y1,\n                 left: x1,\n                 bottom: y2,\n                 right: x2\n             };\n         }\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Cell switching\n\n        function resetActiveCell() {\n            setActiveCellInternal(null,false);\n        }\n\n        function setFocus() {\n            // IE tries to scroll the viewport so that the item being focused is aligned to the left border\n            // IE-specific .setActive() sets the focus, but doesn't scroll\n            if ($.browser.msie) {\n                $canvas[0].setActive();\n            }\n            else {\n                $canvas[0].focus();\n            }\n        }\n\n        function scrollActiveCellIntoView() {\n            if (activeCellNode) {\n                var left = $(activeCellNode).position().left,\n                    right = left + $(activeCellNode).outerWidth(),\n                    scrollLeft = $viewport.scrollLeft(),\n                    scrollRight = scrollLeft + $viewport.width();\n\n                if (left < scrollLeft)\n                    $viewport.scrollLeft(left);\n                else if (right > scrollRight)\n                    $viewport.scrollLeft(Math.min(left, right - $viewport[0].clientWidth));\n            }\n        }\n\n        function setActiveCellInternal(newCell, editMode) {\n            if (activeCellNode !== null) {\n                makeActiveCellNormal();\n                $(activeCellNode).removeClass(\"active\");\n            }\n\n            var activeCellChanged = (activeCellNode !== newCell);\n            activeCellNode = newCell;\n\n            if (activeCellNode != null) {\n                activeRow = parseInt($(activeCellNode).parent().attr(\"row\"));\n                activeCell = activePosX = getCellFromNode(activeCellNode);\n\n                $(activeCellNode).addClass(\"active\");\n\n                if (options.editable && editMode && isCellPotentiallyEditable(activeRow,activeCell)) {\n                    clearTimeout(h_editorLoader);\n\n                    if (options.asyncEditorLoading) {\n                        h_editorLoader = setTimeout(function() { makeActiveCellEditable(); }, options.asyncEditorLoadDelay);\n                    }\n                    else {\n                        makeActiveCellEditable();\n                    }\n                }\n                else {\n                      setFocus();\n                }\n            }\n            else {\n                activeRow = activeCell = null;\n            }\n\n            if (activeCellChanged) {\n                scrollActiveCellIntoView();\n                trigger(self.onActiveCellChanged, getActiveCell());\n            }\n        }\n\n        function clearTextSelection() {\n            if (document.selection && document.selection.empty) {\n                document.selection.empty();\n            }\n            else if (window.getSelection) {\n                var sel = window.getSelection();\n                if (sel && sel.removeAllRanges) {\n                    sel.removeAllRanges();\n                }\n            }\n        }\n\n        function isCellPotentiallyEditable(row, cell) {\n            // is the data for this row loaded?\n            if (row < getDataLength() && !getDataItem(row)) {\n                return false;\n            }\n\n            // are we in the Add New row?  can we create new from this cell?\n            if (columns[cell].cannotTriggerInsert && row >= getDataLength()) {\n                return false;\n            }\n\n            // does this cell have an editor?\n            if (!getEditor(row, cell)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        function makeActiveCellNormal() {\n            if (!currentEditor) { return; }\n            trigger(self.onBeforeCellEditorDestroy, {editor:currentEditor});\n            currentEditor.destroy();\n            currentEditor = null;\n\n            if (activeCellNode) {\n                $(activeCellNode).removeClass(\"editable invalid\");\n\n                if (getDataItem(activeRow)) {\n                    var column = columns[activeCell];\n                    activeCellNode.innerHTML = getFormatter(activeRow, column)(activeRow, activeCell, getDataItem(activeRow)[column.field], column, getDataItem(activeRow));\n                    invalidatePostProcessingResults(activeRow);\n                }\n            }\n\n            // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n            // IE can't set focus to anything else correctly\n            if ($.browser.msie) { clearTextSelection(); }\n\n            getEditorLock().deactivate(editController);\n        }\n\n        function makeActiveCellEditable(editor) {\n            if (!activeCellNode) { return; }\n            if (!options.editable) {\n                throw \"Grid : makeActiveCellEditable : should never get called when options.editable is false\";\n            }\n\n            // cancel pending async call if there is one\n            clearTimeout(h_editorLoader);\n\n            if (!isCellPotentiallyEditable(activeRow,activeCell)) {\n                return;\n            }\n\n            var columnDef = columns[activeCell];\n            var item = getDataItem(activeRow);\n\n            if (trigger(self.onBeforeEditCell, {row:activeRow, cell:activeCell, item:item, column:columnDef}) === false) {\n                setFocus();\n                return;\n            }\n\n            getEditorLock().activate(editController);\n            $(activeCellNode).addClass(\"editable\");\n\n            // don't clear the cell if a custom editor is passed through\n            if (!editor) {\n            activeCellNode.innerHTML = \"\";\n            }\n\n            currentEditor = new (editor || getEditor(activeRow, activeCell))({\n                grid: self,\n                gridPosition: absBox($container[0]),\n                position: absBox(activeCellNode),\n                container: activeCellNode,\n                column: columnDef,\n                item: item || {},\n                commitChanges: commitEditAndSetFocus,\n                cancelChanges: cancelEditAndSetFocus\n            });\n\n            if (item)\n                currentEditor.loadValue(item);\n\n            serializedEditorValue = currentEditor.serializeValue();\n\n            if (currentEditor.position)\n                handleActiveCellPositionChange();\n        }\n\n        function commitEditAndSetFocus() {\n            // if the commit fails, it would do so due to a validation error\n            // if so, do not steal the focus from the editor\n            if (getEditorLock().commitCurrentEdit()) {\n                  setFocus();\n\n                if (options.autoEdit) {\n                    navigateDown();\n                }\n            }\n        }\n\n        function cancelEditAndSetFocus() {\n            if (getEditorLock().cancelCurrentEdit()) {\n                  setFocus();\n            }\n        }\n\n        function absBox(elem) {\n            var box = {top:elem.offsetTop, left:elem.offsetLeft, bottom:0, right:0, width:$(elem).outerWidth(), height:$(elem).outerHeight(), visible:true};\n            box.bottom = box.top + box.height;\n            box.right = box.left + box.width;\n\n            // walk up the tree\n            var offsetParent = elem.offsetParent;\n            while ((elem = elem.parentNode) != document.body) {\n                if (box.visible && elem.scrollHeight != elem.offsetHeight && $(elem).css(\"overflowY\") != \"visible\")\n                    box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n\n                if (box.visible && elem.scrollWidth != elem.offsetWidth && $(elem).css(\"overflowX\") != \"visible\")\n                    box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n\n                box.left -= elem.scrollLeft;\n                box.top -= elem.scrollTop;\n\n                if (elem === offsetParent) {\n                    box.left += elem.offsetLeft;\n                    box.top += elem.offsetTop;\n                    offsetParent = elem.offsetParent;\n                }\n\n                box.bottom = box.top + box.height;\n                box.right = box.left + box.width;\n            }\n\n            return box;\n        }\n\n        function getActiveCellPosition(){\n            return absBox(activeCellNode);\n        }\n\n        function getGridPosition(){\n            return absBox($container[0])\n        }\n\n        function handleActiveCellPositionChange() {\n            if (!activeCellNode) return;\n            var cellBox;\n\n            trigger(self.onActiveCellPositionChanged, {});\n\n            if (currentEditor) {\n                cellBox = cellBox || getActiveCellPosition();\n                if (currentEditor.show && currentEditor.hide) {\n                    if (!cellBox.visible)\n                        currentEditor.hide();\n                    else\n                        currentEditor.show();\n                }\n\n                if (currentEditor.position)\n                    currentEditor.position(cellBox);\n            }\n        }\n\n        function getCellEditor() {\n            return currentEditor;\n        }\n\n        function getActiveCell() {\n            if (!activeCellNode)\n                return null;\n            else\n                return {row: activeRow, cell: activeCell};\n        }\n\n        function getActiveCellNode() {\n            return activeCellNode;\n        }\n\n        function scrollRowIntoView(row, doPaging) {\n            var rowAtTop = row * options.rowHeight;\n            var rowAtBottom = (row + 1) * options.rowHeight - viewportH + (viewportHasHScroll?scrollbarDimensions.height:0);\n\n            // need to page down?\n            if ((row + 1) * options.rowHeight > scrollTop + viewportH + offset) {\n                scrollTo(doPaging ? rowAtTop : rowAtBottom);\n                render();\n            }\n\n            // or page up?\n            else if (row * options.rowHeight < scrollTop + offset) {\n                scrollTo(doPaging ? rowAtBottom : rowAtTop);\n                render();\n            }\n        }\n\n        function getColspan(row, cell) {\n            var metadata = data.getItemMetadata && data.getItemMetadata(row);\n            if (!metadata || !metadata.columns) {\n                return 1;\n            }\n\n            var columnData = metadata.columns[columns[cell].id] || metadata.columns[cell];\n            var colspan = (columnData && columnData.colspan);\n            if (colspan === \"*\") {\n                colspan = columns.length - cell;\n            }\n            return (colspan || 1);\n        }\n\n        function findFirstFocusableCell(row) {\n            var cell = 0;\n            while (cell < columns.length) {\n                if (canCellBeActive(row, cell)) {\n                    return cell;\n                }\n                cell += getColspan(row, cell);\n            }\n            return null;\n        }\n\n        function findLastFocusableCell(row) {\n            var cell = 0;\n            var lastFocusableCell = null;\n            while (cell < columns.length) {\n                if (canCellBeActive(row, cell)) {\n                    lastFocusableCell = cell;\n                }\n                cell += getColspan(row, cell);\n            }\n            return lastFocusableCell;\n        }\n\n        function gotoRight(row, cell, posX) {\n            if (cell >= columns.length) {\n                return null;\n            }\n\n            do {\n                cell += getColspan(row, cell);\n            }\n            while (cell < columns.length && !canCellBeActive(row, cell));\n\n            if (cell < columns.length) {\n                return {\n                    \"row\": row,\n                    \"cell\": cell,\n                    \"posX\": cell\n                };\n            }\n            return null;\n        }\n\n        function gotoLeft(row, cell, posX) {\n            if (cell <= 0) {\n                return null;\n            }\n\n            var firstFocusableCell = findFirstFocusableCell(row);\n            if (firstFocusableCell === null || firstFocusableCell >= cell) {\n                return null;\n            }\n\n            var prev = {\n                \"row\": row,\n                \"cell\": firstFocusableCell,\n                \"posX\": firstFocusableCell\n            };\n            var pos;\n            while (true) {\n                pos = gotoRight(prev.row, prev.cell, prev.posX);\n                if (!pos) {\n                    return null;\n                }\n                if (pos.cell >= cell) {\n                    return prev;\n                }\n                prev = pos;\n            }\n        }\n\n        function gotoDown(row, cell, posX) {\n            var prevCell;\n            while (true) {\n                if (++row >= getDataLength() + (options.enableAddRow ? 1 : 0)) {\n                    return null;\n                }\n\n                prevCell = cell = 0;\n                while (cell <= posX) {\n                    prevCell = cell;\n                    cell += getColspan(row, cell);\n                }\n\n                if (canCellBeActive(row, prevCell)) {\n                    return {\n                        \"row\": row,\n                        \"cell\": prevCell,\n                        \"posX\": posX\n                    };\n                }\n            }\n        }\n\n        function gotoUp(row, cell, posX) {\n            var prevCell;\n            while (true) {\n                if (--row < 0) {\n                    return null;\n                }\n\n                prevCell = cell = 0;\n                while (cell <= posX) {\n                    prevCell = cell;\n                    cell += getColspan(row, cell);\n                }\n\n                if (canCellBeActive(row, prevCell)) {\n                    return {\n                        \"row\": row,\n                        \"cell\": prevCell,\n                        \"posX\": posX\n                    };\n                }\n            }\n        }\n\n        function gotoNext(row, cell, posX) {\n            var pos = gotoRight(row, cell, posX);\n            if (pos) {\n                return pos;\n            }\n\n            var firstFocusableCell = null;\n            while (++row < getDataLength() + (options.enableAddRow ? 1 : 0)) {\n                firstFocusableCell = findFirstFocusableCell(row);\n                if (firstFocusableCell !== null) {\n                    return {\n                        \"row\": row,\n                        \"cell\": firstFocusableCell,\n                        \"posX\": firstFocusableCell\n                    };\n                }\n            }\n            return null;\n        }\n\n        function gotoPrev(row, cell, posX) {\n            var pos;\n            var lastSelectableCell;\n            while (!pos) {\n                pos = gotoLeft(row, cell, posX);\n                if (pos) {\n                    break;\n                }\n                if (--row < 0) {\n                    return null;\n                }\n\n                cell = 0;\n                lastSelectableCell = findLastFocusableCell(row);\n                if (lastSelectableCell !== null) {\n                    pos = {\n                        \"row\": row,\n                        \"cell\": lastSelectableCell,\n                        \"posX\": lastSelectableCell\n                    };\n                }\n            }\n            return pos;\n        }\n\n        function navigateRight() {\n            navigate(\"right\");\n        }\n\n        function navigateLeft() {\n            navigate(\"left\");\n        }\n\n        function navigateDown() {\n            navigate(\"down\");\n        }\n\n        function navigateUp() {\n            navigate(\"up\");\n        }\n\n        function navigateNext() {\n            navigate(\"next\");\n        }\n\n        function navigatePrev() {\n            navigate(\"prev\");\n        }\n\n        function navigate(dir) {\n            if (!activeCellNode || !options.enableCellNavigation) { return; }\n            if (!getEditorLock().commitCurrentEdit()) { return; }\n\n            var stepFunctions = {\n                \"up\":       gotoUp,\n                \"down\":     gotoDown,\n                \"left\":     gotoLeft,\n                \"right\":    gotoRight,\n                \"prev\":     gotoPrev,\n                \"next\":     gotoNext\n            };\n            var stepFn = stepFunctions[dir];\n            var pos = stepFn(activeRow, activeCell, activePosX);\n            if (pos) {\n                var isAddNewRow = (pos.row == getDataLength());\n                scrollRowIntoView(pos.row, !isAddNewRow);\n                setActiveCellInternal(getCellNode(pos.row, pos.cell), isAddNewRow || options.autoEdit);\n                activePosX = pos.posX;\n            }\n        }\n\n        function getCellNode(row, cell) {\n            if (rowsCache[row]) {\n                var cells = $(rowsCache[row]).children();\n                var nodeCell;\n                for (var i = 0; i < cells.length; i++) {\n                    nodeCell = getCellFromNode(cells[i]);\n                    if (nodeCell === cell) {\n                        return cells[i];\n                    }\n                    else if (nodeCell > cell) {\n                        return null;\n                    }\n\n                }\n            }\n            return null;\n        }\n\n        function setActiveCell(row, cell) {\n            if (row > getDataLength() || row < 0 || cell >= columns.length || cell < 0) {\n                return;\n            }\n\n            if (!options.enableCellNavigation) {\n                return;\n            }\n\n            scrollRowIntoView(row,false);\n            setActiveCellInternal(getCellNode(row,cell),false);\n        }\n\n        function canCellBeActive(row, cell) {\n            if (!options.enableCellNavigation || row >= getDataLength() + (options.enableAddRow ? 1 : 0) || row < 0 || cell >= columns.length || cell < 0) {\n                return false;\n            }\n\n            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n            if (rowMetadata && typeof rowMetadata.focusable === \"boolean\") {\n                return rowMetadata.focusable;\n            }\n\n            var columnMetadata = rowMetadata && rowMetadata.columns;\n            if (columnMetadata && columnMetadata[columns[cell].id] && typeof columnMetadata[columns[cell].id].focusable === \"boolean\") {\n                return columnMetadata[columns[cell].id].focusable;\n            }\n            if (columnMetadata && columnMetadata[cell] && typeof columnMetadata[cell].focusable === \"boolean\") {\n                return columnMetadata[cell].focusable;\n            }\n\n            if (typeof columns[cell].focusable === \"boolean\") {\n                return columns[cell].focusable;\n            }\n\n            return true;\n        }\n\n        function canCellBeSelected(row, cell) {\n            if (row >= getDataLength() || row < 0 || cell >= columns.length || cell < 0) {\n                return false;\n            }\n\n            var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\n            if (rowMetadata && typeof rowMetadata.selectable === \"boolean\") {\n                return rowMetadata.selectable;\n            }\n\n            var columnMetadata = rowMetadata && rowMetadata.columns && (rowMetadata.columns[columns[cell].id] || rowMetadata.columns[cell]);\n            if (columnMetadata && typeof columnMetadata.selectable === \"boolean\") {\n                return columnMetadata.selectable;\n            }\n\n            if (typeof columns[cell].selectable === \"boolean\") {\n                return columns[cell].selectable;\n            }\n\n            return true;\n        }\n\n        function gotoCell(row, cell, forceEdit) {\n            if (!canCellBeActive(row, cell)) {\n                return;\n            }\n\n            if (!getEditorLock().commitCurrentEdit()) { return; }\n\n            scrollRowIntoView(row,false);\n\n            var newCell = getCellNode(row, cell);\n\n            // if selecting the 'add new' row, start editing right away\n            setActiveCellInternal(newCell, forceEdit || (row === getDataLength()) || options.autoEdit);\n\n            // if no editor was created, set the focus back on the grid\n            if (!currentEditor) {\n                setFocus();\n            }\n        }\n\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // IEditor implementation for the editor lock\n\n        function commitCurrentEdit() {\n            var item = getDataItem(activeRow);\n            var column = columns[activeCell];\n\n            if (currentEditor) {\n                if (currentEditor.isValueChanged()) {\n                    var validationResults = currentEditor.validate();\n\n                    if (validationResults.valid) {\n                        if (activeRow < getDataLength()) {\n                            var editCommand = {\n                                row: activeRow,\n                                cell: activeCell,\n                                editor: currentEditor,\n                                serializedValue: currentEditor.serializeValue(),\n                                prevSerializedValue: serializedEditorValue,\n                                execute: function() {\n                                    this.editor.applyValue(item,this.serializedValue);\n                                    updateRow(this.row);\n                                },\n                                undo: function() {\n                                    this.editor.applyValue(item,this.prevSerializedValue);\n                                    updateRow(this.row);\n                                }\n                            };\n\n                            if (options.editCommandHandler) {\n                                makeActiveCellNormal();\n                                options.editCommandHandler(item,column,editCommand);\n\n                            }\n                            else {\n                                editCommand.execute();\n                                makeActiveCellNormal();\n                            }\n\n                            trigger(self.onCellChange, {\n                                row: activeRow,\n                                cell: activeCell,\n                                item: item\n                            });\n                        }\n                        else {\n                            var newItem = {};\n                            currentEditor.applyValue(newItem,currentEditor.serializeValue());\n                            makeActiveCellNormal();\n                            trigger(self.onAddNewRow, {item:newItem, column:column});\n                        }\n\n                        // check whether the lock has been re-acquired by event handlers\n                        return !getEditorLock().isActive();\n                    }\n                    else {\n                        // TODO: remove and put in onValidationError handlers in examples\n                        $(activeCellNode).addClass(\"invalid\");\n                        $(activeCellNode).stop(true,true).effect(\"highlight\", {color:\"red\"}, 300);\n\n                        trigger(self.onValidationError, {\n                            editor: currentEditor,\n                            cellNode: activeCellNode,\n                            validationResults: validationResults,\n                            row: activeRow,\n                            cell: activeCell,\n                            column: column\n                        });\n\n                        currentEditor.focus();\n                        return false;\n                    }\n                }\n\n                makeActiveCellNormal();\n            }\n            return true;\n        }\n\n        function cancelCurrentEdit() {\n            makeActiveCellNormal();\n            return true;\n        }\n\n        function rowsToRanges(rows) {\n            var ranges = [];\n            var lastCell = columns.length - 1;\n            for (var i = 0; i < rows.length; i++) {\n                ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));\n            }\n            return ranges;\n        }\n\n        function getSelectedRows() {\n            if (!selectionModel) {\n                throw \"Selection model is not set\";\n            }\n            return selectedRows;\n        }\n\n        function setSelectedRows(rows) {\n            if (!selectionModel) {\n                throw \"Selection model is not set\";\n            }\n            selectionModel.setSelectedRanges(rowsToRanges(rows));\n        }\n\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Debug\n\n        this.debug = function() {\n            var s = \"\";\n\n            s += (\"\\n\" + \"counter_rows_rendered:  \" + counter_rows_rendered);\n            s += (\"\\n\" + \"counter_rows_removed:  \" + counter_rows_removed);\n            s += (\"\\n\" + \"renderedRows:  \" + renderedRows);\n            s += (\"\\n\" + \"numVisibleRows:  \" + numVisibleRows);\n            s += (\"\\n\" + \"maxSupportedCssHeight:  \" + maxSupportedCssHeight);\n            s += (\"\\n\" + \"n(umber of pages):  \" + n);\n            s += (\"\\n\" + \"(current) page:  \" + page);\n            s += (\"\\n\" + \"page height (ph):  \" + ph);\n            s += (\"\\n\" + \"scrollDir:  \" + scrollDir);\n\n            alert(s);\n        };\n\n        // a debug helper to be able to access private members\n        this.eval = function(expr) {\n            return eval(expr);\n        };\n\n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // Public API\n\n        $.extend(this, {\n            \"slickGridVersion\": \"2.0a1\",\n\n            // Events\n            \"onScroll\":                     new Slick.Event(),\n            \"onSort\":                       new Slick.Event(),\n            \"onHeaderContextMenu\":          new Slick.Event(),\n            \"onHeaderClick\":                new Slick.Event(),\n            \"onMouseEnter\":                 new Slick.Event(),\n            \"onMouseLeave\":                 new Slick.Event(),\n            \"onClick\":                      new Slick.Event(),\n            \"onDblClick\":                   new Slick.Event(),\n            \"onContextMenu\":                new Slick.Event(),\n            \"onKeyDown\":                    new Slick.Event(),\n            \"onAddNewRow\":                  new Slick.Event(),\n            \"onValidationError\":            new Slick.Event(),\n            \"onViewportChanged\":            new Slick.Event(),\n            \"onColumnsReordered\":           new Slick.Event(),\n            \"onColumnsResized\":             new Slick.Event(),\n            \"onCellChange\":                 new Slick.Event(),\n            \"onBeforeEditCell\":             new Slick.Event(),\n            \"onBeforeCellEditorDestroy\":    new Slick.Event(),\n            \"onBeforeDestroy\":              new Slick.Event(),\n            \"onActiveCellChanged\":          new Slick.Event(),\n            \"onActiveCellPositionChanged\":  new Slick.Event(),\n            \"onDragInit\":                   new Slick.Event(),\n            \"onDragStart\":                  new Slick.Event(),\n            \"onDrag\":                       new Slick.Event(),\n            \"onDragEnd\":                    new Slick.Event(),\n            \"onSelectedRowsChanged\":        new Slick.Event(),\n\n            // Methods\n            \"registerPlugin\":               registerPlugin,\n            \"unregisterPlugin\":             unregisterPlugin,\n            \"getColumns\":                   getColumns,\n            \"setColumns\":                   setColumns,\n            \"getColumnIndex\":               getColumnIndex,\n            \"updateColumnHeader\":           updateColumnHeader,\n            \"setSortColumn\":                setSortColumn,\n            \"autosizeColumns\":              autosizeColumns,\n            \"getOptions\":                   getOptions,\n            \"setOptions\":                   setOptions,\n            \"getData\":                      getData,\n            \"getDataLength\":                getDataLength,\n            \"getDataItem\":                  getDataItem,\n            \"setData\":                      setData,\n            \"getSelectionModel\":            getSelectionModel,\n            \"setSelectionModel\":            setSelectionModel,\n            \"getSelectedRows\":              getSelectedRows,\n            \"setSelectedRows\":              setSelectedRows,\n\n            \"render\":                       render,\n            \"invalidate\":                   invalidate,\n            \"invalidateRow\":                invalidateRow,\n            \"invalidateRows\":               invalidateRows,\n            \"invalidateAllRows\":            invalidateAllRows,\n            \"updateCell\":                   updateCell,\n            \"updateRow\":                    updateRow,\n            \"getViewport\":                  getVisibleRange,\n            \"resizeCanvas\":                 resizeCanvas,\n            \"updateRowCount\":               updateRowCount,\n            \"scrollRowIntoView\":            scrollRowIntoView,\n            \"getCanvasNode\":                getCanvasNode,\n\n            \"getCellFromPoint\":             getCellFromPoint,\n            \"getCellFromEvent\":             getCellFromEvent,\n            \"getActiveCell\":                getActiveCell,\n            \"setActiveCell\":                setActiveCell,\n            \"getActiveCellNode\":            getActiveCellNode,\n            \"getActiveCellPosition\":        getActiveCellPosition,\n            \"resetActiveCell\":              resetActiveCell,\n            \"editActiveCell\":               makeActiveCellEditable,\n            \"getCellEditor\":                getCellEditor,\n            \"getCellNode\":                  getCellNode,\n            \"getCellNodeBox\":               getCellNodeBox,\n            \"canCellBeSelected\":            canCellBeSelected,\n            \"canCellBeActive\":              canCellBeActive,\n            \"navigatePrev\":                 navigatePrev,\n            \"navigateNext\":                 navigateNext,\n            \"navigateUp\":                   navigateUp,\n            \"navigateDown\":                 navigateDown,\n            \"navigateLeft\":                 navigateLeft,\n            \"navigateRight\":                navigateRight,\n            \"gotoCell\":                     gotoCell,\n            \"getTopPanel\":                  getTopPanel,\n            \"showTopPanel\":                 showTopPanel,\n            \"hideTopPanel\":                 hideTopPanel,\n            \"showHeaderRowColumns\":         showHeaderRowColumns,\n            \"hideHeaderRowColumns\":         hideHeaderRowColumns,\n            \"getHeaderRow\":                 getHeaderRow,\n            \"getHeaderRowColumn\":           getHeaderRowColumn,\n            \"getGridPosition\":              getGridPosition,\n            \"flashCell\":                    flashCell,\n            \"addCellCssStyles\":             addCellCssStyles,\n            \"setCellCssStyles\":             setCellCssStyles,\n            \"removeCellCssStyles\":          removeCellCssStyles,\n\n            \"destroy\":                      destroy,\n\n            // IEditor implementation\n            \"getEditorLock\":                getEditorLock,\n            \"getEditController\":            getEditController\n        });\n\n        init();\n    }\n}(jQuery));\n","/*! \r\n * jquery.event.drag - v 2.0.0 \r\n * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com\r\n * Open Source MIT License - http://threedubmedia.com/code/license\r\n */\r\n// Created: 2008-06-04 \r\n// Updated: 2010-06-07\r\n// REQUIRES: jquery 1.4.2+\r\n\r\n;(function( $ ){\r\n\r\n// add the jquery instance method\r\n$.fn.drag = function( str, arg, opts ){\r\n\t// figure out the event type\r\n\tvar type = typeof str == \"string\" ? str : \"\",\r\n\t// figure out the event handler...\r\n\tfn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;\r\n\t// fix the event type\r\n\tif ( type.indexOf(\"drag\") !== 0 ) \r\n\t\ttype = \"drag\"+ type;\r\n\t// were options passed\r\n\topts = ( str == fn ? arg : opts ) || {};\r\n\t// trigger or bind event handler\r\n\treturn fn ? this.bind( type, opts, fn ) : this.trigger( type );\r\n};\r\n\r\n// local refs (increase compression)\r\nvar $event = $.event, \r\n$special = $event.special,\r\n// configure the drag special event \r\ndrag = $special.drag = {\r\n\t\r\n\t// these are the default settings\r\n\tdefaults: {\r\n\t\twhich: 1, // mouse button pressed to start drag sequence\r\n\t\tdistance: 0, // distance dragged before dragstart\r\n\t\tnot: ':input', // selector to suppress dragging on target elements\r\n\t\thandle: null, // selector to match handle target elements\r\n\t\trelative: false, // true to use \"position\", false to use \"offset\"\r\n\t\tdrop: true, // false to suppress drop events, true or selector to allow\r\n\t\tclick: false // false to suppress click events after dragend (no proxy)\r\n\t},\r\n\t\r\n\t// the key name for stored drag data\r\n\tdatakey: \"dragdata\",\r\n\t\r\n\t// the namespace for internal live events\r\n\tlivekey: \"livedrag\",\r\n\t\r\n\t// count bound related events\r\n\tadd: function( obj ){ \r\n\t\t// read the interaction data\r\n\t\tvar data = $.data( this, drag.datakey ),\r\n\t\t// read any passed options \r\n\t\topts = obj.data || {};\r\n\t\t// count another realted event\r\n\t\tdata.related += 1;\r\n\t\t// bind the live \"draginit\" delegator\r\n\t\tif ( !data.live && obj.selector ){\r\n\t\t\tdata.live = true;\r\n\t\t\t$event.add( this, \"draginit.\"+ drag.livekey, drag.delegate );\r\n\t\t}\r\n\t\t// extend data options bound with this event\r\n\t\t// don't iterate \"opts\" in case it is a node \r\n\t\t$.each( drag.defaults, function( key, def ){\r\n\t\t\tif ( opts[ key ] !== undefined )\r\n\t\t\t\tdata[ key ] = opts[ key ];\r\n\t\t});\r\n\t},\r\n\t\r\n\t// forget unbound related events\r\n\tremove: function(){\r\n\t\t$.data( this, drag.datakey ).related -= 1;\r\n\t},\r\n\t\r\n\t// configure interaction, capture settings\r\n\tsetup: function(){\r\n\t\t// check for related events\r\n\t\tif ( $.data( this, drag.datakey ) ) \r\n\t\t\treturn;\r\n\t\t// initialize the drag data with copied defaults\r\n\t\tvar data = $.extend({ related:0 }, drag.defaults );\r\n\t\t// store the interaction data\r\n\t\t$.data( this, drag.datakey, data );\r\n\t\t// bind the mousedown event, which starts drag interactions\r\n\t\t$event.add( this, \"mousedown\", drag.init, data );\r\n\t\t// prevent image dragging in IE...\r\n\t\tif ( this.attachEvent ) \r\n\t\t\tthis.attachEvent(\"ondragstart\", drag.dontstart ); \r\n\t},\r\n\t\r\n\t// destroy configured interaction\r\n\tteardown: function(){\r\n\t\t// check for related events\r\n\t\tif ( $.data( this, drag.datakey ).related ) \r\n\t\t\treturn;\r\n\t\t// remove the stored data\r\n\t\t$.removeData( this, drag.datakey );\r\n\t\t// remove the mousedown event\r\n\t\t$event.remove( this, \"mousedown\", drag.init );\r\n\t\t// remove the \"live\" delegation\r\n\t\t$event.remove( this, \"draginit\", drag.delegate );\r\n\t\t// enable text selection\r\n\t\tdrag.textselect( true ); \r\n\t\t// un-prevent image dragging in IE...\r\n\t\tif ( this.detachEvent ) \r\n\t\t\tthis.detachEvent(\"ondragstart\", drag.dontstart ); \r\n\t},\r\n\t\t\r\n\t// initialize the interaction\r\n\tinit: function( event ){\r\n\t\t// the drag/drop interaction data\r\n\t\tvar dd = event.data, results;\r\n\t\t// check the which directive\r\n\t\tif ( dd.which > 0 && event.which != dd.which ) \r\n\t\t\treturn; \r\n\t\t// check for suppressed selector\r\n\t\tif ( $( event.target ).is( dd.not ) ) \r\n\t\t\treturn;\r\n\t\t// check for handle selector\r\n\t\tif ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length ) \r\n\t\t\treturn;\r\n\t\t// store/reset some initial attributes\r\n\t\tdd.propagates = 1;\r\n\t\tdd.interactions = [ drag.interaction( this, dd ) ];\r\n\t\tdd.target = event.target;\r\n\t\tdd.pageX = event.pageX;\r\n\t\tdd.pageY = event.pageY;\r\n\t\tdd.dragging = null;\r\n\t\t// handle draginit event... \r\n\t\tresults = drag.hijack( event, \"draginit\", dd );\r\n\t\t// early cancel\r\n\t\tif ( !dd.propagates )\r\n\t\t\treturn;\r\n\t\t// flatten the result set\r\n\t\tresults = drag.flatten( results );\r\n\t\t// insert new interaction elements\r\n\t\tif ( results && results.length ){\r\n\t\t\tdd.interactions = [];\r\n\t\t\t$.each( results, function(){\r\n\t\t\t\tdd.interactions.push( drag.interaction( this, dd ) );\r\n\t\t\t});\r\n\t\t}\r\n\t\t// remember how many interactions are propagating\r\n\t\tdd.propagates = dd.interactions.length;\r\n\t\t// locate and init the drop targets\r\n\t\tif ( dd.drop !== false && $special.drop ) \r\n\t\t\t$special.drop.handler( event, dd );\r\n\t\t// disable text selection\r\n\t\tdrag.textselect( false ); \r\n\t\t// bind additional events...\r\n\t\t$event.add( document, \"mousemove mouseup\", drag.handler, dd );\r\n\t\t// helps prevent text selection\r\n\t\treturn false;\r\n\t},\t\r\n\t// returns an interaction object\r\n\tinteraction: function( elem, dd ){\r\n\t\treturn {\r\n\t\t\tdrag: elem, \r\n\t\t\tcallback: new drag.callback(), \r\n\t\t\tdroppable: [],\r\n\t\t\toffset: $( elem )[ dd.relative ? \"position\" : \"offset\" ]() || { top:0, left:0 }\r\n\t\t};\r\n\t},\r\n\t// handle drag-releatd DOM events\r\n\thandler: function( event ){ \r\n\t\t// read the data before hijacking anything\r\n\t\tvar dd = event.data;\r\n\t\t// handle various events\r\n\t\tswitch ( event.type ){\r\n\t\t\t// mousemove, check distance, start dragging\r\n\t\t\tcase !dd.dragging && 'mousemove': \r\n\t\t\t\t//  drag tolerance, x� + y� = distance�\r\n\t\t\t\tif ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) ) \r\n\t\t\t\t\tbreak; // distance tolerance not reached\r\n\t\t\t\tevent.target = dd.target; // force target from \"mousedown\" event (fix distance issue)\r\n\t\t\t\tdrag.hijack( event, \"dragstart\", dd ); // trigger \"dragstart\"\r\n\t\t\t\tif ( dd.propagates ) // \"dragstart\" not rejected\r\n\t\t\t\t\tdd.dragging = true; // activate interaction\r\n\t\t\t// mousemove, dragging\r\n\t\t\tcase 'mousemove': \r\n\t\t\t\tif ( dd.dragging ){\r\n\t\t\t\t\t// trigger \"drag\"\t\t\r\n\t\t\t\t\tdrag.hijack( event, \"drag\", dd );\r\n\t\t\t\t\tif ( dd.propagates ){\r\n\t\t\t\t\t\t// manage drop events\r\n\t\t\t\t\t\tif ( dd.drop !== false && $special.drop )\r\n\t\t\t\t\t\t\t$special.drop.handler( event, dd ); // \"dropstart\", \"dropend\"\r\n\t\t\t\t\t\tbreak; // \"drag\" not rejected, stop\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.type = \"mouseup\"; // helps \"drop\" handler behave\r\n\t\t\t\t}\r\n\t\t\t// mouseup, stop dragging\r\n\t\t\tcase 'mouseup': \r\n\t\t\t\t$event.remove( document, \"mousemove mouseup\", drag.handler ); // remove page events\r\n\t\t\t\tif ( dd.dragging ){\r\n\t\t\t\t\tif ( dd.drop !== false && $special.drop ) \r\n\t\t\t\t\t\t$special.drop.handler( event, dd ); // \"drop\"\r\n\t\t\t\t\tdrag.hijack( event, \"dragend\", dd ); // trigger \"dragend\"\t\r\n\t\t\t\t\t}\r\n\t\t\t\tdrag.textselect( true ); // enable text selection\r\n\t\t\t\t\r\n\t\t\t\t// if suppressing click events...\r\n\t\t\t\tif ( dd.click === false && dd.dragging ){\r\n\t\t\t\t\tjQuery.event.triggered = true;\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\tjQuery.event.triggered = false;\r\n\t\t\t\t\t}, 20 );\r\n\t\t\t\tdd.dragging = false; // deactivate element\t\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\t\r\n\t// identify potential delegate elements\r\n\tdelegate: function( event ){\r\n\t\t// local refs\r\n\t\tvar elems = [], target, \r\n\t\t// element event structure\r\n\t\tevents = $.data( this, \"events\" ) || {};\r\n\t\t// query live events\r\n\t\t$.each( events.live || [], function( i, obj ){\r\n\t\t\t// no event type matches\r\n\t\t\tif ( obj.preType.indexOf(\"drag\") !== 0 )\r\n\t\t\t\treturn;\r\n\t\t\t// locate the element to delegate\r\n\t\t\ttarget = $( event.target ).closest( obj.selector, event.currentTarget )[0];\r\n\t\t\t// no element found\r\n\t\t\tif ( !target ) \r\n\t\t\t\treturn;\r\n\t\t\t// add an event handler\r\n\t\t\t$event.add( target, obj.origType+'.'+drag.livekey, obj.origHandler, obj.data );\r\n\t\t\t// remember new elements\r\n\t\t\tif ( $.inArray( target, elems ) < 0 )\r\n\t\t\t\telems.push( target );\t\t\r\n\t\t});\r\n\t\t// if there are no elements, break\r\n\t\tif ( !elems.length ) \r\n\t\t\treturn false;\r\n\t\t// return the matched results, and clenup when complete\t\t\r\n\t\treturn $( elems ).bind(\"dragend.\"+ drag.livekey, function(){\r\n\t\t\t$event.remove( this, \".\"+ drag.livekey ); // cleanup delegation\r\n\t\t});\r\n\t},\r\n\t\r\n\t// re-use event object for custom events\r\n\thijack: function( event, type, dd, x, elem ){\r\n\t\t// not configured\r\n\t\tif ( !dd ) \r\n\t\t\treturn;\r\n\t\t// remember the original event and type\r\n\t\tvar orig = { event:event.originalEvent, type: event.type },\r\n\t\t// is the event drag related or drog related?\r\n\t\tmode = type.indexOf(\"drop\") ? \"drag\" : \"drop\",\r\n\t\t// iteration vars\r\n\t\tresult, i = x || 0, ia, $elems, callback,\r\n\t\tlen = !isNaN( x ) ? x : dd.interactions.length;\r\n\t\t// modify the event type\r\n\t\tevent.type = type;\r\n\t\t// remove the original event\r\n\t\tevent.originalEvent = null;\r\n\t\t// initialize the results\r\n\t\tdd.results = [];\r\n\t\t// handle each interacted element\r\n\t\tdo if ( ia = dd.interactions[ i ] ){\r\n\t\t\t// validate the interaction\r\n\t\t\tif ( type !== \"dragend\" && ia.cancelled )\r\n\t\t\t\tcontinue;\r\n\t\t\t// set the dragdrop properties on the event object\r\n\t\t\tcallback = drag.properties( event, dd, ia );\r\n\t\t\t// prepare for more results\r\n\t\t\tia.results = [];\r\n\t\t\t// handle each element\r\n\t\t\t$( elem || ia[ mode ] || dd.droppable ).each(function( p, subject ){\r\n\t\t\t\t// identify drag or drop targets individually\r\n\t\t\t\tcallback.target = subject;\r\n\t\t\t\t// handle the event\t\r\n\t\t\t\tresult = subject ? $event.handle.call( subject, event, callback ) : null;\r\n\t\t\t\t// stop the drag interaction for this element\r\n\t\t\t\tif ( result === false ){\r\n\t\t\t\t\tif ( mode == \"drag\" ){\r\n\t\t\t\t\t\tia.cancelled = true;\r\n\t\t\t\t\t\tdd.propagates -= 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( type == \"drop\" ){\r\n\t\t\t\t\t\tia[ mode ][p] = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// assign any dropinit elements\r\n\t\t\t\telse if ( type == \"dropinit\" )\r\n\t\t\t\t\tia.droppable.push( drag.element( result ) || subject );\r\n\t\t\t\t// accept a returned proxy element \r\n\t\t\t\tif ( type == \"dragstart\" )\r\n\t\t\t\t\tia.proxy = $( drag.element( result ) || ia.drag )[0];\r\n\t\t\t\t// remember this result\t\r\n\t\t\t\tia.results.push( result );\r\n\t\t\t\t// forget the event result, for recycling\r\n\t\t\t\tdelete event.result;\r\n\t\t\t\t// break on cancelled handler\r\n\t\t\t\tif ( type !== \"dropinit\" )\r\n\t\t\t\t\treturn result;\r\n\t\t\t});\t\r\n\t\t\t// flatten the results\t\r\n\t\t\tdd.results[ i ] = drag.flatten( ia.results );\t\r\n\t\t\t// accept a set of valid drop targets\r\n\t\t\tif ( type == \"dropinit\" )\r\n\t\t\t\tia.droppable = drag.flatten( ia.droppable );\r\n\t\t\t// locate drop targets\r\n\t\t\tif ( type == \"dragstart\" && !ia.cancelled )\r\n\t\t\t\tcallback.update(); \r\n\t\t}\r\n\t\twhile ( ++i < len )\r\n\t\t// restore the original event & type\r\n\t\tevent.type = orig.type;\r\n\t\tevent.originalEvent = orig.event;\r\n\t\t// return all handler results\r\n\t\treturn drag.flatten( dd.results );\r\n\t},\r\n\t\t\r\n\t// extend the callback object with drag/drop properties...\r\n\tproperties: function( event, dd, ia ){\t\t\r\n\t\tvar obj = ia.callback;\r\n\t\t// elements\r\n\t\tobj.drag = ia.drag;\r\n\t\tobj.proxy = ia.proxy || ia.drag;\r\n\t\t// starting mouse position\r\n\t\tobj.startX = dd.pageX;\r\n\t\tobj.startY = dd.pageY;\r\n\t\t// current distance dragged\r\n\t\tobj.deltaX = event.pageX - dd.pageX;\r\n\t\tobj.deltaY = event.pageY - dd.pageY;\r\n\t\t// original element position\r\n\t\tobj.originalX = ia.offset.left;\r\n\t\tobj.originalY = ia.offset.top;\r\n\t\t// adjusted element position\r\n\t\tobj.offsetX = event.pageX - ( dd.pageX - obj.originalX );\r\n\t\tobj.offsetY = event.pageY - ( dd.pageY - obj.originalY );\r\n\t\t// assign the drop targets information\r\n\t\tobj.drop = drag.flatten( ( ia.drop || [] ).slice() );\r\n\t\tobj.available = drag.flatten( ( ia.droppable || [] ).slice() );\r\n\t\treturn obj;\t\r\n\t},\r\n\t\r\n\t// determine is the argument is an element or jquery instance\r\n\telement: function( arg ){\r\n\t\tif ( arg && ( arg.jquery || arg.nodeType == 1 ) )\r\n\t\t\treturn arg;\r\n\t},\r\n\t\r\n\t// flatten nested jquery objects and arrays into a single dimension array\r\n\tflatten: function( arr ){\r\n\t\treturn $.map( arr, function( member ){\r\n\t\t\treturn member && member.jquery ? $.makeArray( member ) : \r\n\t\t\t\tmember && member.length ? drag.flatten( member ) : member;\r\n\t\t});\r\n\t},\r\n\t\r\n\t// toggles text selection attributes ON (true) or OFF (false)\r\n\ttextselect: function( bool ){ \r\n\t\tvar el = $( document )[ bool ? \"unbind\" : \"bind\" ](\"selectstart\", drag.dontstart );\r\n                // XXX causes a problem with teardown on empty().\r\n                if (el.length == 1 && el[0] == document) {\r\n                    // deleted already...\r\n                    return;\r\n                }\r\n                el\r\n\t\t\t.attr(\"unselectable\", bool ? \"off\" : \"on\" )\r\n\t\t\t.css(\"MozUserSelect\", bool ? \"\" : \"none\" );\r\n\t},\r\n\t\r\n\t// suppress \"selectstart\" and \"ondragstart\" events\r\n\tdontstart: function(){ \r\n\t\treturn false; \r\n\t},\r\n\t\r\n\t// a callback instance contructor\r\n\tcallback: function(){}\r\n\t\r\n};\r\n\r\n// callback methods\r\ndrag.callback.prototype = {\r\n\tupdate: function(){\r\n\t\tif ( $special.drop && this.available.length )\r\n\t\t\t$.each( this.available, function( i ){\r\n\t\t\t\t$special.drop.locate( this, i );\r\n\t\t\t});\r\n\t}\r\n};\r\n\r\n// share the same special event configuration with related events...\r\n$special.draginit = $special.dragstart = $special.dragend = drag;\r\n\r\n})( jQuery );\r\n","/*! \n * jquery.event.drop - v 2.0.0 \n * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com\n * Open Source MIT License - http://threedubmedia.com/code/license\n */\n;(function(f){f.fn.drop=function(c,a,d){var g=typeof c==\"string\"?c:\"\",e=f.isFunction(c)?c:f.isFunction(a)?a:null;if(g.indexOf(\"drop\")!==0)g=\"drop\"+g;d=(c==e?a:d)||{};return e?this.bind(g,d,e):this.trigger(g)};f.drop=function(c){c=c||{};b.multi=c.multi===true?Infinity:c.multi===false?1:!isNaN(c.multi)?c.multi:b.multi;b.delay=c.delay||b.delay;b.tolerance=f.isFunction(c.tolerance)?c.tolerance:c.tolerance===null?null:b.tolerance;b.mode=c.mode||b.mode||\"intersect\"};var l=f.event,i=l.special,b=f.event.special.drop= {multi:1,delay:20,mode:\"overlap\",targets:[],datakey:\"dropdata\",livekey:\"livedrop\",add:function(c){var a=f.data(this,b.datakey);a.related+=1;if(!a.live&&c.selector){a.live=true;l.add(this,\"dropinit.\"+b.livekey,b.delegate)}},remove:function(){f.data(this,b.datakey).related-=1},setup:function(){if(!f.data(this,b.datakey)){f.data(this,b.datakey,{related:0,active:[],anyactive:0,winner:0,location:{}});b.targets.push(this)}},teardown:function(){if(!f.data(this,b.datakey).related){f.removeData(this,b.datakey); l.remove(this,\"dropinit\",b.delegate);var c=this;b.targets=f.grep(b.targets,function(a){return a!==c})}},handler:function(c,a){var d;if(a)switch(c.type){case \"mousedown\":d=f(b.targets);if(typeof a.drop==\"string\")d=d.filter(a.drop);d.each(function(){var g=f.data(this,b.datakey);g.active=[];g.anyactive=0;g.winner=0});a.droppable=d;b.delegates=[];i.drag.hijack(c,\"dropinit\",a);b.delegates=f.unique(i.drag.flatten(b.delegates));break;case \"mousemove\":b.event=c;b.timer||b.tolerate(a);break;case \"mouseup\":b.timer= clearTimeout(b.timer);if(a.propagates){i.drag.hijack(c,\"drop\",a);i.drag.hijack(c,\"dropend\",a);f.each(b.delegates||[],function(){l.remove(this,\".\"+b.livekey)})}break}},delegate:function(c){var a=[],d,g=f.data(this,\"events\")||{};f.each(g.live||[],function(e,h){if(h.preType.indexOf(\"drop\")===0){d=f(c.currentTarget).find(h.selector);d.length&&d.each(function(){l.add(this,h.origType+\".\"+b.livekey,h.origHandler,h.data);f.inArray(this,a)<0&&a.push(this)})}});b.delegates.push(a);return a.length?f(a):false}, locate:function(c,a){var d=f.data(c,b.datakey),g=f(c),e=g.offset()||{},h=g.outerHeight();g=g.outerWidth();e={elem:c,width:g,height:h,top:e.top,left:e.left,right:e.left+g,bottom:e.top+h};if(d){d.location=e;d.index=a;d.elem=c}return e},contains:function(c,a){return(a[0]||a.left)>=c.left&&(a[0]||a.right)<=c.right&&(a[1]||a.top)>=c.top&&(a[1]||a.bottom)<=c.bottom},modes:{intersect:function(c,a,d){return this.contains(d,[c.pageX,c.pageY])?1E9:this.modes.overlap.apply(this,arguments)},overlap:function(c, a,d){return Math.max(0,Math.min(d.bottom,a.bottom)-Math.max(d.top,a.top))*Math.max(0,Math.min(d.right,a.right)-Math.max(d.left,a.left))},fit:function(c,a,d){return this.contains(d,a)?1:0},middle:function(c,a,d){return this.contains(d,[a.left+a.width*0.5,a.top+a.height*0.5])?1:0}},sort:function(c,a){return a.winner-c.winner||c.index-a.index},tolerate:function(c){var a,d,g,e,h,m,j=0,k,p=c.interactions.length,n=[b.event.pageX,b.event.pageY],o=b.tolerance||b.modes[b.mode];do if(k=c.interactions[j]){if(!k)return; k.drop=[];h=[];m=k.droppable.length;if(o)g=b.locate(k.proxy);a=0;do if(d=k.droppable[a]){e=f.data(d,b.datakey);if(d=e.location){e.winner=o?o.call(b,b.event,g,d):b.contains(d,n)?1:0;h.push(e)}}while(++a<m);h.sort(b.sort);a=0;do if(e=h[a])if(e.winner&&k.drop.length<b.multi){if(!e.active[j]&&!e.anyactive)if(i.drag.hijack(b.event,\"dropstart\",c,j,e.elem)[0]!==false){e.active[j]=1;e.anyactive+=1}else e.winner=0;e.winner&&k.drop.push(e.elem)}else if(e.active[j]&&e.anyactive==1){i.drag.hijack(b.event,\"dropend\", c,j,e.elem);e.active[j]=0;e.anyactive-=1}while(++a<m)}while(++j<p);if(b.last&&n[0]==b.last.pageX&&n[1]==b.last.pageY)delete b.timer;else b.timer=setTimeout(function(){b.tolerate(c)},b.delay);b.last=b.event}};i.dropinit=i.dropstart=i.dropend=b})(jQuery);","/***\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\n\n(function($) {\n    // register namespace\n    $.extend(true, window, {\n        \"Slick\": {\n            \"Event\":        Event,\n            \"EventData\":    EventData,\n            \"Range\":        Range,\n            \"NonDataRow\":   NonDataItem,\n            \"Group\":        Group,\n            \"GroupTotals\":  GroupTotals,\n            \"EditorLock\":   EditorLock,\n\n            /***\n             * A global singleton editor lock.\n             * @class GlobalEditorLock\n             * @static\n             * @constructor\n             */\n            \"GlobalEditorLock\": new EditorLock()\n        }\n    });\n\n    /***\n     * An event object for passing data to event handlers and letting them control propagation.\n     * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n     * @class EventData\n     * @constructor\n     */\n    function EventData() {\n        var isPropagationStopped = false;\n        var isImmediatePropagationStopped = false;\n\n        /***\n         * Stops event from propagating up the DOM tree.\n         * @method stopPropagation\n         */\n        this.stopPropagation = function() {\n            isPropagationStopped = true;\n        };\n\n        /***\n         * Returns whether stopPropagation was called on this event object.\n         * @method isPropagationStopped\n         * @return {Boolean}\n         */\n        this.isPropagationStopped = function() {\n            return isPropagationStopped;\n        };\n\n        /***\n         * Prevents the rest of the handlers from being executed.\n         * @method stopImmediatePropagation\n         */\n        this.stopImmediatePropagation = function() {\n            isImmediatePropagationStopped = true;\n        };\n\n        /***\n         * Returns whether stopImmediatePropagation was called on this event object.\\\n         * @method isImmediatePropagationStopped\n         * @return {Boolean}\n         */\n        this.isImmediatePropagationStopped = function() {\n            return isImmediatePropagationStopped;\n        }\n    }\n\n    /***\n     * A simple publisher-subscriber implementation.\n     * @class Event\n     * @constructor\n     */\n    function Event() {\n        var handlers = [];\n\n        /***\n         * Adds an event handler to be called when the event is fired.\n         * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n         * object the event was fired with.<p>\n         * @method subscribe\n         * @param fn {Function} Event handler.\n         */\n        this.subscribe = function(fn) {\n            handlers.push(fn);\n        };\n\n        /***\n         * Removes an event handler added with <code>subscribe(fn)</code>.\n         * @method unsubscribe\n         * @param fn {Function} Event handler to be removed.\n         */\n        this.unsubscribe = function(fn) {\n            for (var i = handlers.length - 1; i >= 0; i--) {\n                if (handlers[i] === fn) {\n                    handlers.splice(i, 1);\n                }\n            }\n        };\n\n        /***\n         * Fires an event notifying all subscribers.\n         * @method notify\n         * @param args {Object} Additional data object to be passed to all handlers.\n         * @param e {EventData}\n         *      Optional.\n         *      An <code>EventData</code> object to be passed to all handlers.\n         *      For DOM events, an existing W3C/jQuery event object can be passed in.\n         * @param scope {Object}\n         *      Optional.\n         *      The scope (\"this\") within which the handler will be executed.\n         *      If not specified, the scope will be set to the <code>Event</code> instance.\n         */\n        this.notify = function(args, e, scope) {\n            e = e || new EventData();\n            scope = scope || this;\n\n            var returnValue;\n            for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n                returnValue = handlers[i].call(scope, e, args);\n            }\n\n            return returnValue;\n        };\n    }\n\n    /***\n     * A structure containing a range of cells.\n     * @class Range\n     * @constructor\n     * @param fromRow {Integer} Starting row.\n     * @param fromCell {Integer} Starting cell.\n     * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n     * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n     */\n    function Range(fromRow, fromCell, toRow, toCell) {\n        if (toRow === undefined && toCell === undefined) {\n            toRow = fromRow;\n            toCell = fromCell;\n        }\n\n        /***\n         * @property fromRow\n         * @type {Integer}\n         */\n        this.fromRow = Math.min(fromRow, toRow);\n\n        /***\n         * @property fromCell\n         * @type {Integer}\n         */\n        this.fromCell = Math.min(fromCell, toCell);\n\n        /***\n         * @property toRow\n         * @type {Integer}\n         */\n        this.toRow = Math.max(fromRow, toRow);\n\n        /***\n         * @property toCell\n         * @type {Integer}\n         */\n        this.toCell = Math.max(fromCell, toCell);\n\n        /***\n         * Returns whether a range represents a single row.\n         * @method isSingleRow\n         * @return {Boolean}\n         */\n        this.isSingleRow = function() {\n            return this.fromRow == this.toRow;\n        };\n\n        /***\n         * Returns whether a range represents a single cell.\n         * @method isSingleCell\n         * @return {Boolean}\n         */\n        this.isSingleCell = function() {\n            return this.fromRow == this.toRow && this.fromCell == this.toCell;\n        };\n\n        /***\n         * Returns whether a range contains a given cell.\n         * @method contains\n         * @param row {Integer}\n         * @param cell {Integer}\n         * @return {Boolean}\n         */\n        this.contains = function(row, cell) {\n            return row >= this.fromRow && row <= this.toRow &&\n                   cell >= this.fromCell && cell <= this.toCell;\n        };\n\n        /***\n         * Returns a readable representation of a range.\n         * @method toString\n         * @return {String}\n         */\n        this.toString = function() {\n            if (this.isSingleCell()) {\n                return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n            }\n            else {\n                return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n            }\n        }\n    }\n\n\n    /***\n     * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n     * @class NonDataItem\n     * @constructor\n     */\n    function NonDataItem() {\n        this.__nonDataRow = true;\n    }\n\n\n    /***\n     * Information about a group of rows.\n     * @class Group\n     * @extends Slick.NonDataItem\n     * @constructor\n     */\n    function Group() {\n        this.__group = true;\n        this.__updated = false;\n\n        /***\n         * Number of rows in the group.\n         * @property count\n         * @type {Integer}\n         */\n        this.count = 0;\n\n        /***\n         * Grouping value.\n         * @property value\n         * @type {Object}\n         */\n        this.value = null;\n\n        /***\n         * Formatted display value of the group.\n         * @property title\n         * @type {String}\n         */\n        this.title = null;\n\n        /***\n         * Whether a group is collapsed.\n         * @property collapsed\n         * @type {Boolean}\n         */\n        this.collapsed = false;\n\n        /***\n         * GroupTotals, if any.\n         * @property totals\n         * @type {GroupTotals}\n         */\n        this.totals = null;\n    }\n\n    Group.prototype = new NonDataItem();\n\n    /***\n     * Compares two Group instances.\n     * @method equals\n     * @return {Boolean}\n     * @param group {Group} Group instance to compare to.\n     */\n    Group.prototype.equals = function(group) {\n        return this.value === group.value &&\n               this.count === group.count &&\n               this.collapsed === group.collapsed;\n    };\n\n    /***\n     * Information about group totals.\n     * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n     * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n     * formatters during the display.\n     * @class GroupTotals\n     * @extends Slick.NonDataItem\n     * @constructor\n     */\n    function GroupTotals() {\n        this.__groupTotals = true;\n\n        /***\n         * Parent Group.\n         * @param group\n         * @type {Group}\n         */\n        this.group = null;\n    }\n\n    GroupTotals.prototype = new NonDataItem();\n\n    /***\n     * A locking helper to track the active edit controller and ensure that only a single controller\n     * can be active at a time.  This prevents a whole class of state and validation synchronization\n     * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n     * and attempt a commit or cancel before proceeding.\n     * @class EditorLock\n     * @constructor\n     */\n    function EditorLock() {\n        var activeEditController = null;\n\n        /***\n         * Returns true if a specified edit controller is active (has the edit lock).\n         * If the parameter is not specified, returns true if any edit controller is active.\n         * @method isActive\n         * @param editController {EditController}\n         * @return {Boolean}\n         */\n        this.isActive = function(editController) {\n            return (editController ? activeEditController === editController : activeEditController !== null);\n        };\n\n        /***\n         * Sets the specified edit controller as the active edit controller (acquire edit lock).\n         * If another edit controller is already active, and exception will be thrown.\n         * @method activate\n         * @param editController {EditController} edit controller acquiring the lock\n         */\n        this.activate = function(editController) {\n            if (editController === activeEditController) { // already activated?\n                return;\n            }\n            if (activeEditController !== null) {\n                throw \"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n            }\n            if (!editController.commitCurrentEdit) {\n                throw \"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\";\n            }\n            if (!editController.cancelCurrentEdit) {\n                throw \"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\";\n            }\n            activeEditController = editController;\n        };\n\n        /***\n         * Unsets the specified edit controller as the active edit controller (release edit lock).\n         * If the specified edit controller is not the active one, an exception will be thrown.\n         * @method deactivate\n         * @param editController {EditController} edit controller releasing the lock\n         */\n        this.deactivate = function(editController) {\n            if (activeEditController !== editController) {\n                throw \"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\";\n            }\n            activeEditController = null;\n        };\n\n        /***\n         * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n         * controller and returns whether the commit attempt was successful (commit may fail due to validation\n         * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n         * and false otherwise.  If no edit controller is active, returns true.\n         * @method commitCurrentEdit\n         * @return {Boolean}\n         */\n        this.commitCurrentEdit = function() {\n            return (activeEditController ? activeEditController.commitCurrentEdit() : true);\n        };\n\n        /***\n         * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n         * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n         * active, returns true.\n         * @method cancelCurrentEdit\n         * @return {Boolean}\n         */\n        this.cancelCurrentEdit = function cancelCurrentEdit() {\n            return (activeEditController ? activeEditController.cancelCurrentEdit() : true);\n        };\n    }\n})(jQuery);\n\n\n","(function($) {\n    $.extend(true, window, {\n        Slick: {\n            Data: {\n                GroupItemMetadataProvider: GroupItemMetadataProvider\n            }\n        }\n    });\n\n\n    /***\n     * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.\n     * This metadata overrides the default behavior and formatting of those rows so that they appear and function\n     * correctly when processed by the grid.\n     *\n     * This class also acts as a grid plugin providing event handlers to expand & collapse groups.\n     * If \"grid.registerPlugin(...)\" is not called, expand & collapse will not work.\n     *\n     * @class GroupItemMetadataProvider\n     * @module Data\n     * @namespace Slick.Data\n     * @constructor\n     * @param options\n     */\n    function GroupItemMetadataProvider(options) {\n        var _grid;\n        var _defaults = {\n            groupCssClass: \"slick-group\",\n            totalsCssClass: \"slick-group-totals\",\n            groupFocusable: true,\n            totalsFocusable: false,\n            toggleCssClass: \"slick-group-toggle\",\n            toggleExpandedCssClass: \"expanded\",\n            toggleCollapsedCssClass: \"collapsed\",\n            enableExpandCollapse: true\n        };\n\n        options = $.extend(true, {}, _defaults, options);\n\n\n        function defaultGroupCellFormatter(row, cell, value, columnDef, item) {\n            if (!options.enableExpandCollapse) {\n                return item.title;\n            }\n\n            return \"<span class='\" + options.toggleCssClass + \" \" +\n                    (item.collapsed ? options.toggleCollapsedCssClass : options.toggleExpandedCssClass) +\n                    \"'></span>\" + item.title;\n        }\n\n        function defaultTotalsCellFormatter(row, cell, value, columnDef, item) {\n            return (columnDef.groupTotalsFormatter && columnDef.groupTotalsFormatter(item, columnDef)) || \"\";\n        }\n\n\n        function init(grid) {\n            _grid = grid;\n            _grid.onClick.subscribe(handleGridClick);\n            _grid.onKeyDown.subscribe(handleGridKeyDown);\n\n        }\n\n        function destroy() {\n            if (_grid) {\n                _grid.onClick.unsubscribe(handleGridClick);\n                _grid.onKeyDown.unsubscribe(handleGridKeyDown);\n            }\n        }\n\n        function handleGridClick(e, args) {\n            var item = this.getDataItem(args.row);\n            if (item && item instanceof Slick.Group && $(e.target).hasClass(options.toggleCssClass)) {\n                if (item.collapsed) {\n                    this.getData().expandGroup(item.value);\n                }\n                else {\n                    this.getData().collapseGroup(item.value);\n                }\n\n                e.stopImmediatePropagation();\n                e.preventDefault();\n            }\n        }\n\n        // TODO:  add -/+ handling\n        function handleGridKeyDown(e, args) {\n            if (options.enableExpandCollapse && (e.which == $.ui.keyCode.SPACE)) {\n                var activeCell = this.getActiveCell();\n                if (activeCell) {\n                    var item = this.getDataItem(activeCell.row);\n                    if (item && item instanceof Slick.Group) {\n                        if (item.collapsed) {\n                            this.getData().expandGroup(item.value);\n                        }\n                        else {\n                            this.getData().collapseGroup(item.value);\n                        }\n\n                        e.stopImmediatePropagation();\n                        e.preventDefault();\n                    }\n                }\n            }\n        }\n\n        function getGroupRowMetadata(item) {\n            return {\n                selectable: false,\n                focusable: options.groupFocusable,\n                cssClasses: options.groupCssClass,\n                columns: {\n                    0: {\n                        colspan: \"*\",\n                        formatter: defaultGroupCellFormatter,\n                        editor: null\n                    }\n                }\n            };\n        }\n\n        function getTotalsRowMetadata(item) {\n            return {\n                selectable: false,\n                focusable: options.totalsFocusable,\n                cssClasses: options.totalsCssClass,\n                formatter: defaultTotalsCellFormatter,\n                editor: null\n            };\n        }\n\n\n        \n        return {\n            \"init\":     init,\n            \"destroy\":  destroy,\n            \"getGroupRowMetadata\":  getGroupRowMetadata,\n            \"getTotalsRowMetadata\": getTotalsRowMetadata\n        };\n    }\n})(jQuery);","(function($) {\n    $.extend(true, window, {\n        Slick: {\n            Data: {\n                DataView: DataView,\n                Aggregators: {\n                    Avg: AvgAggregator,\n                    Min: MinAggregator,\n                    Max: MaxAggregator\n                }\n            }\n        }\n    });\n\n\n    /***\n     * A sample Model implementation.\n     * Provides a filtered view of the underlying data.\n     *\n     * Relies on the data item having an \"id\" property uniquely identifying it.\n     */\n    function DataView(options) {\n        var self = this;\n\n        var defaults = {\n            groupItemMetadataProvider: null\n        };\n\n        \n        // private\n        var idProperty = \"id\";  // property holding a unique row id\n        var items = [];\t\t\t// data by index\n        var rows = [];\t\t\t// data by row\n        var idxById = {};\t\t// indexes by id\n        var rowsById = null;\t// rows by id; lazy-calculated\n        var filter = null;\t\t// filter function\n        var updated = null; \t// updated item ids\n        var suspend = false;\t// suspends the recalculation\n        var sortAsc = true;\n        var fastSortField;\n        var sortComparer;\n\n        // grouping\n        var groupingGetter;\n        var groupingGetterIsAFn;\n        var groupingFormatter;\n        var groupingComparer;\n        var groups = [];\n        var collapsedGroups = {};\n        var aggregators;\n        var aggregateCollapsed = false;\n\n        var pagesize = 0;\n        var pagenum = 0;\n        var totalRows = 0;\n\n        // events\n        var onRowCountChanged = new Slick.Event();\n        var onRowsChanged = new Slick.Event();\n        var onPagingInfoChanged = new Slick.Event();\n\n        options = $.extend(true, {}, defaults, options);\n\n\n        function beginUpdate() {\n            suspend = true;\n        }\n\n        function endUpdate(hints) {\n            suspend = false;\n            refresh(hints);\n        }\n\n        function updateIdxById(startingIndex) {\n            startingIndex = startingIndex || 0;\n            var id;\n            for (var i = startingIndex, l = items.length; i < l; i++) {\n                id = items[i][idProperty];\n                if (id === undefined) {\n                    throw \"Each data element must implement a unique 'id' property\";\n                }\n                idxById[id] = i;\n            }\n        }\n\n        function ensureIdUniqueness() {\n            var id;\n            for (var i = 0, l = items.length; i < l; i++) {\n                id = items[i][idProperty];\n                if (id === undefined || idxById[id] !== i) {\n                    throw \"Each data element must implement a unique 'id' property\";\n                }\n            }\n        }\n\n        function getItems() {\n            return items;\n        }\n\n        function setItems(data, objectIdProperty) {\n            if (objectIdProperty !== undefined) idProperty = objectIdProperty;\n            items = data;\n            idxById = {};\n            updateIdxById();\n            ensureIdUniqueness();\n            refresh();\n        }\n\n        function setPagingOptions(args) {\n            if (args.pageSize != undefined)\n                pagesize = args.pageSize;\n\n            if (args.pageNum != undefined)\n                pagenum = Math.min(args.pageNum, Math.ceil(totalRows / pagesize));\n\n            onPagingInfoChanged.notify(getPagingInfo(), null, self);\n\n            refresh();\n        }\n\n        function getPagingInfo() {\n            return {pageSize:pagesize, pageNum:pagenum, totalRows:totalRows};\n        }\n\n        function sort(comparer, ascending) {\n            sortAsc = ascending;\n            sortComparer = comparer;\n            fastSortField = null;\n            if (ascending === false) items.reverse();\n            items.sort(comparer);\n            if (ascending === false) items.reverse();\n            idxById = {};\n            updateIdxById();\n            refresh();\n        }\n\n        /***\n        * Provides a workaround for the extremely slow sorting in IE.\n        * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\n        * to return the value of that field and then doing a native Array.sort().\n        */\n        function fastSort(field, ascending) {\n            sortAsc = ascending;\n            fastSortField = field;\n            sortComparer = null;\n            var oldToString = Object.prototype.toString;\n            Object.prototype.toString = (typeof field == \"function\")?field:function() { return this[field] };\n            // an extra reversal for descending sort keeps the sort stable\n            // (assuming a stable native sort implementation, which isn't true in some cases)\n            if (ascending === false) items.reverse();\n            items.sort();\n            Object.prototype.toString = oldToString;\n            if (ascending === false) items.reverse();\n            idxById = {};\n            updateIdxById();\n            refresh();\n        }\n\n        function reSort() {\n            if (sortComparer) {\n               sort(sortComparer, sortAsc);\n            }\n            else if (fastSortField) {\n               fastSort(fastSortField, sortAsc);\n            }\n        }\n\n        function setFilter(filterFn) {\n            filter = filterFn;\n            refresh();\n        }\n\n        function groupBy(valueGetter, valueFormatter, sortComparer) {\n            if (!options.groupItemMetadataProvider) {\n                options.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n            }\n\n            groupingGetter = valueGetter;\n            groupingGetterIsAFn = typeof groupingGetter === \"function\";\n            groupingFormatter = valueFormatter;\n            groupingComparer = sortComparer;\n            collapsedGroups = {};\n            groups = [];\n            refresh();\n        }\n\n        function setAggregators(groupAggregators, includeCollapsed) {\n            aggregators = groupAggregators;\n            aggregateCollapsed = includeCollapsed !== undefined ? includeCollapsed : aggregateCollapsed;\n            refresh();\n        }\n\n        function getItemByIdx(i) {\n            return items[i];\n        }\n\n        function getIdxById(id) {\n            return idxById[id];\n        }\n\n        // calculate the lookup table on first call\n        function getRowById(id) {\n            if (!rowsById) {\n                rowsById = {};\n                for (var i = 0, l = rows.length; i < l; ++i) {\n                    rowsById[rows[i][idProperty]] = i;\n                }\n            }\n\n            return rowsById[id];\n        }\n\n        function getItemById(id) {\n            return items[idxById[id]];\n        }\n\n        function updateItem(id, item) {\n            if (idxById[id] === undefined || id !== item[idProperty])\n                throw \"Invalid or non-matching id\";\n            items[idxById[id]] = item;\n            if (!updated) updated = {};\n            updated[id] = true;\n            refresh();\n        }\n\n        function insertItem(insertBefore, item) {\n            items.splice(insertBefore, 0, item);\n            updateIdxById(insertBefore);\n            refresh();\n        }\n\n        function addItem(item) {\n            items.push(item);\n            updateIdxById(items.length - 1);\n            refresh();\n        }\n\n        function deleteItem(id) {\n            var idx = idxById[id];\n            if (idx === undefined) {\n                throw \"Invalid id\";\n            }\n            delete idxById[id];\n            items.splice(idx, 1);\n            updateIdxById(idx);\n            refresh();\n        }\n\n        function getLength() {\n            return rows.length;\n        }\n\n        function getItem(i) {\n            return rows[i];\n        }\n\n        function getItemMetadata(i) {\n            var item = rows[i];\n            if (item === undefined) {\n                return null;\n            }\n\n            // overrides for group rows\n            if (item.__group) {\n                return options.groupItemMetadataProvider.getGroupRowMetadata(item);\n            }\n\n            // overrides for totals rows\n            if (item.__groupTotals) {\n                return options.groupItemMetadataProvider.getTotalsRowMetadata(item);\n            }\n\n            return null;\n        }\n\n        function collapseGroup(groupingValue) {\n            collapsedGroups[groupingValue] = true;\n            refresh();\n        }\n\n        function expandGroup(groupingValue) {\n            delete collapsedGroups[groupingValue];\n            refresh();\n        }\n\n        function getGroups() {\n            return groups;\n        }\n\n        function extractGroups(rows) {\n            var group;\n            var val;\n            var groups = [];\n            var groupsByVal = {};\n            var r;\n\n            for (var i = 0, l = rows.length; i < l; i++) {\n                r = rows[i];\n                val = (groupingGetterIsAFn) ? groupingGetter(r) : r[groupingGetter];\n                group = groupsByVal[val];\n                if (!group) {\n                    group = new Slick.Group();\n                    group.count = 0;\n                    group.value = val;\n                    group.rows = [];\n                    groups[groups.length] = group;\n                    groupsByVal[val] = group;\n                }\n\n                group.rows[group.count++] = r;\n            }\n\n            return groups;\n        }\n\n        // TODO:  lazy totals calculation\n        function calculateGroupTotals(group) {\n            var r, idx;\n\n            if (group.collapsed && !aggregateCollapsed) {\n                return;\n            }\n\n            idx = aggregators.length;\n            while (idx--) {\n                aggregators[idx].init();\n            }\n\n            for (var j = 0, jj = group.rows.length; j < jj; j++) {\n                r = group.rows[j];\n                idx = aggregators.length;\n                while (idx--) {\n                    aggregators[idx].accumulate(r);\n                }\n            }\n\n            var t = new Slick.GroupTotals();\n            idx = aggregators.length;\n            while (idx--) {\n                aggregators[idx].storeResult(t);\n            }\n            t.group = group;\n            group.totals = t;\n        }\n\n        function calculateTotals(groups) {\n            var idx = groups.length;\n            while (idx--) {\n                calculateGroupTotals(groups[idx]);\n            }\n        }\n\n        function finalizeGroups(groups) {\n            var idx = groups.length, g;\n            while (idx--) {\n                g = groups[idx];\n                g.collapsed = (g.value in collapsedGroups);\n                g.title = groupingFormatter ? groupingFormatter(g) : g.value;\n            }\n        }\n\n        function flattenGroupedRows(groups) {\n            var groupedRows = [], gl = 0, idx, t, g, r;\n            for (var i = 0, l = groups.length; i < l; i++) {\n                g = groups[i];\n                groupedRows[gl++] = g;\n\n                if (!g.collapsed) {\n                    for (var j = 0, jj = g.rows.length; j < jj; j++) {\n                        groupedRows[gl++] = g.rows[j];\n                    }\n                }\n\n                if (g.totals && (!g.collapsed || aggregateCollapsed)) {\n                    groupedRows[gl++] = g.totals;\n                }\n            }\n            return groupedRows;\n        }\n\n        function getFilteredAndPagedItems(items, filter) {\n            var pageStartRow = pagesize * pagenum;\n            var pageEndRow = pageStartRow + pagesize;\n            var itemIdx = 0, rowIdx = 0, item;\n            var newRows = [];\n\n            // filter the data and get the current page if paging\n            if (filter) {\n                for (var i = 0, il = items.length; i < il; ++i) {\n                    item = items[i];\n\n                    if (!filter || filter(item)) {\n                        if (!pagesize || (itemIdx >= pageStartRow && itemIdx < pageEndRow)) {\n                            newRows[rowIdx] = item;\n                            rowIdx++;\n                        }\n                        itemIdx++;\n                    }\n                }\n            }\n            else {\n                newRows = pagesize ? items.slice(pageStartRow, pageEndRow) : items.concat();\n                itemIdx = items.length;\n            }\n\n            return {totalRows:itemIdx, rows:newRows};\n        }\n\n        function getRowDiffs(rows, newRows) {\n            var item, r, eitherIsNonData, diff = [];\n            for (var i = 0, rl = rows.length, nrl = newRows.length; i < nrl; i++) {\n                if (i >= rl) {\n                    diff[diff.length] = i;\n                }\n                else {\n                    item = newRows[i];\n                    r = rows[i];\n\n                    if ((groupingGetter && (eitherIsNonData = (item.__nonDataRow) || (r.__nonDataRow)) &&\n                            item.__group !== r.__group ||\n                            item.__updated ||\n                            item.__group && !item.equals(r))\n                        || (aggregators && eitherIsNonData &&\n                            // no good way to compare totals since they are arbitrary DTOs\n                            // deep object comparison is pretty expensive\n                            // always considering them 'dirty' seems easier for the time being\n                            (item.__groupTotals || r.__groupTotals))\n                        || item[idProperty] != r[idProperty]\n                        || (updated && updated[item[idProperty]])\n                        ) {\n                        diff[diff.length] = i;\n                    }\n                }\n            }\n            return diff;\n        }\n\n        function recalc(_items, _rows, _filter) {\n            rowsById = null;\n\n            var newRows = [];\n\n            var filteredItems = getFilteredAndPagedItems(_items, _filter);\n            totalRows = filteredItems.totalRows;\n            newRows = filteredItems.rows;\n\n            groups = [];\n            if (groupingGetter != null) {\n                groups = extractGroups(newRows);\n                if (groups.length) {\n                    finalizeGroups(groups);\n                    if (aggregators) {\n                        calculateTotals(groups);\n                    }\n                    groups.sort(groupingComparer);\n                    newRows = flattenGroupedRows(groups);\n                }\n            }\n\n            var diff = getRowDiffs(_rows, newRows);\n\n            rows = newRows;\n\n            return diff;\n        }\n\n        function refresh() {\n            if (suspend) return;\n\n            var countBefore = rows.length;\n            var totalRowsBefore = totalRows;\n\n            var diff = recalc(items, rows, filter); // pass as direct refs to avoid closure perf hit\n\n            // if the current page is no longer valid, go to last page and recalc\n            // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized\n            if (pagesize && totalRows < pagenum * pagesize) {\n                pagenum = Math.floor(totalRows / pagesize);\n                diff = recalc(items, rows, filter);\n            }\n\n            updated = null;\n\n            if (totalRowsBefore != totalRows) onPagingInfoChanged.notify(getPagingInfo(), null, self);\n            if (countBefore != rows.length) onRowCountChanged.notify({previous:countBefore, current:rows.length}, null, self);\n            if (diff.length > 0) onRowsChanged.notify({rows:diff}, null, self);\n        }\n\n\n        return {\n            // methods\n            \"beginUpdate\":      beginUpdate,\n            \"endUpdate\":        endUpdate,\n            \"setPagingOptions\": setPagingOptions,\n            \"getPagingInfo\":    getPagingInfo,\n            \"getItems\":         getItems,\n            \"setItems\":         setItems,\n            \"setFilter\":        setFilter,\n            \"sort\":             sort,\n            \"fastSort\":         fastSort,\n            \"reSort\":           reSort,\n            \"groupBy\":          groupBy,\n            \"setAggregators\":   setAggregators,\n            \"collapseGroup\":    collapseGroup,\n            \"expandGroup\":      expandGroup,\n            \"getGroups\":        getGroups,\n            \"getIdxById\":       getIdxById,\n            \"getRowById\":       getRowById,\n            \"getItemById\":      getItemById,\n            \"getItemByIdx\":     getItemByIdx,\n            \"refresh\":          refresh,\n            \"updateItem\":       updateItem,\n            \"insertItem\":       insertItem,\n            \"addItem\":          addItem,\n            \"deleteItem\":       deleteItem,\n\n            // data provider methods\n            \"getLength\":        getLength,\n            \"getItem\":          getItem,\n            \"getItemMetadata\":  getItemMetadata,\n\n            // events\n            \"onRowCountChanged\":    onRowCountChanged,\n            \"onRowsChanged\":        onRowsChanged,\n            \"onPagingInfoChanged\":  onPagingInfoChanged\n        };\n    }\n\n\n\n\n    function AvgAggregator(field) {\n        var count;\n        var nonNullCount;\n        var sum;\n\n        this.init = function() {\n            count = 0;\n            nonNullCount = 0;\n            sum = 0;\n        };\n\n        this.accumulate = function(item) {\n            var val = item[field];\n            count++;\n            if (val != null && val != NaN) {\n                nonNullCount++;\n                sum += 1 * val;\n            }\n        };\n\n        this.storeResult = function(groupTotals) {\n            if (!groupTotals.avg) {\n                groupTotals.avg = {};\n            }\n            if (nonNullCount != 0) {\n                groupTotals.avg[field] = sum / nonNullCount;\n            }\n        };\n    }\n\n    function MinAggregator(field) {\n        var min;\n\n        this.init = function() {\n            min = null;\n        };\n\n        this.accumulate = function(item) {\n            var val = item[field];\n            if (val != null && val != NaN) {\n                if (min == null ||val < min) {\n                    min = val;\n                }\n            }\n        };\n\n        this.storeResult = function(groupTotals) {\n            if (!groupTotals.min) {\n                groupTotals.min = {};\n            }\n            groupTotals.min[field] = min;\n        }\n    }\n\n    function MaxAggregator(field) {\n        var max;\n\n        this.init = function() {\n            max = null;\n        };\n\n        this.accumulate = function(item) {\n            var val = item[field];\n            if (val != null && val != NaN) {\n                if (max == null ||val > max) {\n                    max = val;\n                }\n            }\n        };\n\n        this.storeResult = function(groupTotals) {\n            if (!groupTotals.max) {\n                groupTotals.max = {};\n            }\n            groupTotals.max[field] = max;\n        }\n    }\n\n    // TODO:  add more built-in aggregators\n    // TODO:  merge common aggregators in one to prevent needles iterating\n\n})(jQuery);","(function($) {\n\nvar log = function() {\n    if (window.console && console.log) {\n        // log for FireBug or WebKit console\n        console.log(Array.prototype.slice.call(arguments));\n    }\n};\n\nvar TitleCellFormatter = function(row, cell, value, columnDef, dataContext) { \n    var url = './' + dataContext.name;\n    var result = '<a href=\"' + url + '\">' + value + '</a>';\n    return result;\n}; \n\nvar AuthorCellFormatter = function(row, cell, value, columnDef, dataContext) { \n    var url = dataContext.profile_url;\n    var result = '<a href=\"' + url + '\">' + value + '</a>';\n    return result;\n}; \n\n\nvar DateCellFormatter = function(row, cell, value, columnDef, dataContext) { \n    // Value is an isoformat.\n    var year = value.substring(0, 4);\n    var month = value.substring(5, 7);\n    var day = value.substring(8, 10);\n    if (month.charAt(0) == '0') {\n        month = month.substring(1);\n    }\n    if (day.charAt(0) == '0') {\n        day = day.substring(1);\n    }\n    // equivalent of .globalize-short-date done directly,\n    // bypassing the dom manipulation of Globalize\n    // which we don't need here.\n    var date_format = (window.head_data || {}).date_format;\n    if (! date_format) {\n        date_format = karl_client_data.date_format;\n    }\n    var d = new Date(year, month - 1, day);\n    var dText = Globalize.format(d, 'd', Globalize.culture(date_format));\n    return dText;\n}; \n\n\n$.widget('karl.karlwikitoc', {\n\n    options: {\n        //items: []...,\n        //rowHeight: 25,\n        //headerHeight: 25,\n    },\n\n    _create: function() {\n        var self = this;\n\n        var button =\n            '<a href=\"#\" class=\"karl-wikitoc-button-inspector\">Options</a>';\n\n        var footer_classes = 'karl-wikitoc-footer ui-widget-header';\n\n        this.element.append(\n          '<div class=\"karl-wikitoc-gridwrapper ui-helper-clearfix\">' +\n            '<div class=\"karl-wikitoc-widthconstrainer\">' +\n                '<div class=\"karl-wikitoc-grid\"></div>' +\n            '</div>' +\n            '<div class=\"karl-wikitoc-inspector\">' +\n              '<div class=\"karl-wikitoc-inspector-wrapper\"><div class=\"karl-wikitoc-inspector-wrapper2\">' +\n                \n                  '<fieldset class=\"karl-wikitoc-livesearch\">' +\n                      '<legend>Find in text</legend>' +\n                        '<div>' +\n                          '<p>Letters anywhere in title, tags, or author</p>' +\n                          '<div>' +\n                            '<span class=\"karl-wikitoc-icon-search ui-icon ui-icon-search\"></span>' +\n                            '<input class=\"karl-wikitoc-input-livesearch\" type=\"text\"></input>' +\n                          '</div>' +\n                          '<div class=\"ui-helper-clearfix\"></div>' +\n                    '</div>' +\n                  '</fieldset>' +\n\n                  '<fieldset class=\"karl-wikitoc-grouping\">' +\n                      '<legend>Grouping</legend>' +\n                        '<div>' +\n                          '<p>Column, if any, to group by</p>' +\n                          '<div>' +\n                            '<input type=\"checkbox\" class=\"karl-wikitoc-cb-grouping\"></input>' +\n                            '<label>Group by tags</label>' +\n                          '</div>' +\n                    '</div>' +\n                  '</fieldset>' +\n\n                  '<fieldset class=\"karl-wikitoc-columnselectors\">' +\n                      '<legend>Columns</legend>' +\n                      '<div>' +\n                          '<p>Which columns to show in the grid, in addition to title</p>' +\n                          '<div>' +\n                            '<input class=\"karl-wikitoc-cb-title\" type=\"checkbox\" checked=\"checked\"></input>' +\n                            '<label>Title</label>' +\n                          '</div>' +\n                          '<div>' +\n                            '<input class=\"karl-wikitoc-cb-author_name\" type=\"checkbox\" checked=\"checked\"></input>' +\n                            '<label>Author</label>' +\n                          '</div>' +\n                          '<div>' +\n                            '<input class=\"karl-wikitoc-cb-tags\" type=\"checkbox\"></input>' +\n                            '<label>Tags</label>' +\n                          '</div>' +\n                          '<div>' +\n                            '<input class=\"karl-wikitoc-cb-created\" type=\"checkbox\" checked=\"checked\"></input>' +\n                            '<label>Created</label>' +\n                          '</div>' +\n                          '<div>' +\n                            '<input class=\"karl-wikitoc-cb-modified\" type=\"checkbox\"></input>' +\n                            '<label>Modified</label>' +\n                          '</div>' +\n                    '</div>' +\n                  '</fieldset>' +\n\n              '</div></div>' +\n            '</div>' +\n          '</div>' +\n          '<div class=\"' + footer_classes + '\">' +\n            '<span class=\"karl-wikitoc-items\"><span class=\"karl-wikitoc-items-num\">0</span> items</span>' +\n            button +\n          '</div>'\n        );\n\n        // this is the wrapper for grid + inspector\n        this.el_gridwrapper = this.element.find('.karl-wikitoc-gridwrapper');\n        // this extra wrapper is needed because setCanvas takes \n        // the _parent_ width... not the _grid_ width... so we need a parent... sigh\n        this.el_widthconstrainer = this.element.find('.karl-wikitoc-widthconstrainer');\n        this.el_grid = this.el_gridwrapper.find('.karl-wikitoc-grid');\n        this.el_inspector = this.el_gridwrapper.find('.karl-wikitoc-inspector');\n        this.el_columnselectors = this.el_inspector.find('.karl-wikitoc-columnselectors');\n        this.el_footer = this.element.find('.karl-wikitoc-footer');\n        this.el_button_inspector = this.el_footer.find('.karl-wikitoc-button-inspector');\n        this.el_input_livesearch = this.el_inspector.find('.karl-wikitoc-input-livesearch');\n        this.el_cb_grouping = this.el_inspector.find('.karl-wikitoc-cb-grouping');\n        this.el_label_items_num = this.el_footer.find('.karl-wikitoc-items-num');\n\n        // sniff the inspector width from the css.\n        this.inspector_width = $('.karl-wikitoc-inspector-wrapper').width();\n\n        this.el_column_selectors = {\n            title: this.el_inspector.find('.karl-wikitoc-cb-title'),\n            author_name: this.el_inspector.find('.karl-wikitoc-cb-author_name'),\n            tags: this.el_inspector.find('.karl-wikitoc-cb-tags'),\n            created: this.el_inspector.find('.karl-wikitoc-cb-created'), \n            modified: this.el_inspector.find('.karl-wikitoc-cb-modified') \n        };\n        $.each(this.el_column_selectors, function(id, el) {\n            el.click(function() {\n                self.grid_columns = self.grid.getColumns();\n                self.filterGridColumns();\n                self.grid.setColumns(self.grid_columns);\n            });\n        });\n\n        // inspector toggle\n        this.el_button_inspector\n            .button({\n                icons: { primary: 'ui-icon-triangle-1-w' }\n            });\n        this.el_button_inspector\n            .click(function(evt) {\n                // we need the current sizes and order, so refresh it.\n                self.grid_columns = self.grid.getColumns();\n                self.toggleInspector(evt);\n                return false;\n            });\n\n        // livesearch\n        this.searchString = '';\n        this.el_input_livesearch.keyup(function(evt) {\n            Slick.GlobalEditorLock.cancelCurrentEdit();\n            // clear on Esc\n            if (evt.which == 27) {\n                this.value = '';\n            }\n            self.searchString = this.value;\n            self.dataView.refresh();\n        }); \n\n        // grouping\n        this.el_cb_grouping.click(function(evt) {\n            var selected = $(this).is(':checked');\n            if (selected) {\n                self.enableGrouping();\n            } else {\n                self.disableGrouping();\n            }\n        });\n\n        // hover\n        this.el_grid.find('.slick-row')\n            .live(\"mouseenter mouseleave\", function(evt) {\n                var el = $(this);\n                // do not hover group rows\n                if (el.is('.slick-group')) {\n                    return;\n                }\n                // handle hover class\n                if (evt.type == \"mouseenter\") {\n                    el.addClass('karl-wikitoc-grid-row-hover');\n                } else {\n                    el.removeClass('karl-wikitoc-grid-row-hover');\n                }\n            });\n\n        // columns\n        this.inactive_columns = {};\n        this.grid_columns = [\n            {id:\"title\", name:\"Title\", field:\"title\", formatter: TitleCellFormatter, width:320, minWidth:20, sortable:true},\n            {id:\"author_name\", name:\"Author\", field:\"author_name\", formatter: AuthorCellFormatter, width:80, minWidth:20, sortable:true},\n            {id:\"tags\", name:\"Tags\", field:\"tags\", width: 140, minWidth:20, sortable:false},\n            {id:\"created\", name:\"Created\", field:\"created\", formatter: DateCellFormatter, width:60, minWidth:20, sortable:true},\n            {id:\"modified\", name:\"Modified\", field:\"modified\", formatter: DateCellFormatter, width:60, minWidth:20, sortable:true}\n        ];\n\n        this.filterGridColumns();\n        var columns = this.grid_columns;\n\n        var options = {\n            enableCellNavigation: true,\n            editable: false,\n            forceFitColumns: true,\n            rowHeight: this.options.rowHeight,\n            headerHeight: this.options.headerHeight\n        };\n\n        var groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n        var dataView = this.dataView = new Slick.Data.DataView({\n            groupItemMetadataProvider: groupItemMetadataProvider\n        });\n\n \n\n        var grid = this.grid = new Slick.Grid(this.el_grid, dataView, columns, options);\n\n\n        // register the group item metadata provider to add expand/collapse group handlers\n        grid.registerPlugin(groupItemMetadataProvider);\n\n        function comparer(a,b) {\n            var va = a[self.sortCol].toLowerCase();\n            var vb = b[self.sortCol].toLowerCase();\n            return (va == vb ? 0 : (va > vb ? 1 : -1));\n        }\n\n        // sorting\n        this.sortCol = \"title\";\n        this.sortDir = 1;\n\n        grid.onSort.subscribe(function(e, args) {\n            self.sortDir = args.sortAsc ? 1 : -1;\n            self.sortCol = args.sortCol.field;\n\n            // using native sort with comparer\n            // preferred method but can be very slow in IE with huge datasets\n            dataView.sort(comparer, args.sortAsc);\n        });\n\n        // wire up model events to drive the grid\n        dataView.onRowCountChanged.subscribe(function(e,args) {\n            grid.updateRowCount();\n            grid.render();\n        });\n\n        dataView.onRowsChanged.subscribe(function(e,args) {\n            grid.invalidateRows(args.rows);\n            grid.render();\n        });\n        \n        // initialize the model after all the events have been hooked up\n        dataView.beginUpdate();\n        dataView.setItems(this.options.items);\n        dataView.setFilter(function contentFilter(item) {\n            return self._contentFilter(item);\n        });\n\n        // sort initially\n        grid.setSortColumn(this.sortCol, this.sortDir);\n        dataView.sort(comparer, this.sortDir == 1);\n        dataView.endUpdate();\n\n        // display the footer info\n        this.el_label_items_num.text(this.options.items.length);       \n\n        // needed since slickgrid 2.0.1\n        this.grid.setColumns(this.grid_columns);\n    },\n\n    //destroy: function() {\n    //    $.Widget.prototype.destroy.call( this );\n    //}\n\n    _addFakeRecords: function() {\n        var self = this;\n        // The fake records enable a record appear in as many\n        // tag groups, as needed. We enable this by adding the extra\n        // records to the grid.\n        if (! this._fake_records_added) {\n            this._fake_records_added = true;\n            // we add some fake records so each row appears multiple\n            // times, under each tag group it belongs to.\n            this.dataView.beginUpdate();\n            var items = this.dataView.getItems();\n            $.each(items, function(index, item) {\n                var tags = item.tags;\n                item.original = true;\n                if (tags.length === 0) {\n                    item.effective_tag = '';\n                } else {\n                    item.effective_tag = tags[0];\n                    $.each(tags, function(tagindex, tag) {\n                        if (tagindex === 0) {\n                            return;\n                        }\n                        var new_item = $.extend({}, item, {\n                            effective_tag: tag,\n                            original: false\n                            });\n                        self.dataView.addItem(new_item);\n                    });\n                }\n            });\n            this.dataView.endUpdate();\n        }\n    },\n\n    enableGrouping: function() {\n        var self = this;\n        this.groupingEnabled = true;\n\n        // Add the fake records needed for the grouping\n        this._addFakeRecords();\n\n        this.dataView.groupBy(\n            'effective_tag',\n            function (g) {\n                if (g.value !== '') {\n                    return '<span class=\"karl-wikitoc-groupheader\">Tag: ' + g.value + '</span>' ;\n                } else {\n                    return '<span class=\"karl-wikitoc-groupheader\">Untagged:</span>';\n                }\n            },\n            function (a, b) {\n                // Search case insensitive.\n                var va = a.value.toLowerCase();\n                var vb = b.value.toLowerCase();\n                // equality\n                if (va == vb) {\n                    return 0;\n                }\n                // We want no-tags at the end,\n                // which have the value of ''.\n                if (va === '') {\n                    return +1;\n                }\n                if (vb === '') {\n                    return -1;\n                }\n                // Otherwise just order alphabetically.\n                return va < vb ? -1 : +1;\n            }\n        );\n\n    },\n\n    disableGrouping: function() {\n        this.groupingEnabled = false;\n        this.dataView.groupBy(null);\n    },\n\n    _contentFilter: function(item) {\n        // The fake records need to be filtered out in case there is\n        // no grouping.\n        if (! this.groupingEnabled && this._fake_records_added && ! item.original) {\n            return false;\n        }\n        // Next, filter based on the search string\n        // provided by the user.\n        var ss = this.searchString.toLowerCase();\n        if (ss === '') {\n            return true;\n        }\n        if (item.title.toLowerCase().indexOf(ss) != -1) {\n            return true;\n        }\n        if (item.author_name.toLowerCase().indexOf(ss) != -1) {\n            return true;\n        }\n        var found_in_tags = false;\n        $.each(item.tags, function(index, tag) {\n            if (tag.toLowerCase().indexOf(ss) != -1) {\n                found_in_tags = true;\n                return false;  // stop iteration\n            }\n        });\n        return found_in_tags;\n    },\n\n    filterGridColumns: function() {\n        var self = this;\n        var inactive_columns = this.inactive_columns;\n        // handle columns which become added\n        $.each(inactive_columns, function(id, value) {\n            var new_column = value.data;\n            var selected = self.el_column_selectors[id].is(':checked');\n            if (selected) {\n                // add the column after its marker,\n                // or if that is not present, then to the end.\n                var new_columns = [];\n                var added = false;\n                if (! value.prev_column) {\n                    // add to the beginning\n                    new_columns.push(new_column);\n                    added = true;\n                }\n                $.each(self.grid_columns, function(index, column) {\n                    new_columns.push(column);\n                    if (value.prev_column && column.id == value.prev_column.id) {\n                        // add to the middle, after the marker\n                        new_columns.push(new_column);\n                        added = true;\n                    }\n                });\n                if (! added) {\n                    // add to the end\n                    new_columns.push(new_column);\n                }\n                // delete it from inactive\n                delete inactive_columns[id];\n                // write back to list\n                self.grid_columns = new_columns;\n            }\n        });\n        // handle columns that are removed\n        var active_columns = [];\n        var prev_column = null;\n        $.each(this.grid_columns, function(index, column) {\n            var id = column.id;\n            var selected = self.el_column_selectors[id].is(':checked');\n            if (selected) {\n                active_columns.push(column);\n            } else {\n                inactive_columns[column.id] = {\n                    data: column,\n                    prev_column: prev_column\n                };\n            }\n            prev_column = column;\n        });\n        this.grid_columns = active_columns;\n    },\n\n    toggleInspector: function(evt) {\n        var self = this;\n        // avoid toggling while toggling is in progress\n        if (this.inspector_button_locked) {\n            return;\n        }\n        this.inspector_button_locked = true;\n        var width = this.inspector_width;\n        //\n        var current_open = this._inspector_open;\n        var new_open = this._inspector_open = ! current_open;\n        var full_w = this.el_widthconstrainer.width();\n        if (new_open) {\n            // opening\n            this.el_button_inspector\n                .button('option', 'icons', {primary: 'ui-icon-triangle-1-e'});\n            this.el_inspector\n                .animate({\n                    'width': '' + width + 'px'\n                } , {\n                    complete: function() {\n                        var ratio = (full_w - width) / full_w;\n                        $.each(self.grid_columns, function(index, column) {\n                            column.width = Math.round(column.width * ratio);\n                        });\n                        self.el_widthconstrainer.width(full_w - width);\n                        self.grid.resizeCanvas();\n                        self.grid.setColumns(self.grid_columns);\n                        self.inspector_button_locked = false;\n                    }\n                });\n        } else {\n            // closing\n            this.el_button_inspector\n                .button('option', 'icons', {primary: 'ui-icon-triangle-1-w'});\n            this.el_inspector\n                .animate({\n                    'width': '0px'\n                } , {\n                    complete: function() {\n                        self.inspector_button_locked = false;\n                    }\n                });\n            this.el_widthconstrainer.css('width', '100%');\n            this.grid.resizeCanvas();\n            var ratio = (full_w + width) / full_w;\n            $.each(this.grid_columns, function(index, column) {\n                column.width = Math.round(column.width * ratio);\n            });\n            this.grid.setColumns(this.grid_columns);\n        }\n    },\n\n\n    resizeColumns: function(evt) {\n        var self = this;\n        // avoid resize while toggling is in progress\n        if (this.inspector_button_locked) {\n            return;\n        }\n        this.inspector_button_locked = true;\n        //\n        var full_w = this.el_gridwrapper.width();\n        if (this._inspector_open) {\n            full_w = full_w - this.inspector_width;\n            this.el_widthconstrainer.width(full_w);\n        }\n        //\n        var width = 0;\n        $.each(this.grid_columns, function(index, column) {\n            width += column.width;\n        });\n        var ratio = full_w / width;\n       // $.each(this.grid_columns, function(index, column) {\n       //     column.width = Math.round(column.width * ratio);\n       // });\n\n        this.grid.autosizeColumns();\n        this.grid.resizeCanvas();\n        this.grid.setColumns(this.grid_columns);\n\n        // compensate widths after setColumns\n        //\n        var headers = this.element.find('.slick-header-column');\n        var firstHeader = headers.eq(0);\n        var newHeaderColumnPadding = parseInt(firstHeader.css('padding-left'), 10) +\n                parseInt(firstHeader.css('padding-right'), 10);\n        var headerWidthCorrection = this.headerColumnPadding - newHeaderColumnPadding;\n        this.element.find('.slick-header-column').each(function () {\n            var el = $(this);\n            el.width(el.width() + headerWidthCorrection); \n        });\n\n        this.inspector_button_locked = false;\n    }\n    \n});\n\n\n})(jQuery);\n"],"sourceRoot":"/source/"}